tumortotal1 <- surv_fit(surv_formula,data=train_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=train_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="TCGA Lung adenocarcinoma \n Wilkerson subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,1825),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
surv_formula <- as.formula("Surv(test_clinic$time,test_clinic$status)~ Wilk.Class_test")
tumortotal2 <- surv_fit(surv_formula,data=test_clinic)
tumortotal2diff <- survdiff(surv_formula)
tumortotal2pval<- pchisq(tumortotal2diff$chisq, length(tumortotal2diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal2,data=test_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="GSE68465 Lung adenocarcinoma \n Wilkerson subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,1825),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
population <- 100
generations <-150
nCV <- 5
distancetype <- "pearson"
TournamentSize <- 2
period <- 1825
usegpu <- TRUE
load("./inst/extdata/results/final_2.rda")
plot_pareto(output)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
# N of non-dominated solutions
nrow(NonDom_solutions)
# N of partitions found
table(NonDom_solutions$k)
#Average N of genes per signature
mean(unlist(lapply(NonDom_solutions$Genes,length)))
#SC range
range(NonDom_solutions$SC.Fit)
# Survival fitnesss range
range(NonDom_solutions$Surv.Fit)
RESULT<- non_dominated_summary(output=output,OS=train_surv, prob_matrix= train_expression, distancetype =distancetype, usegpu= usegpu )
RESULT
best_sol=NULL
for(i in unique(RESULT$k)){
best_sol=c(best_sol,RESULT[RESULT$k==i,"solution"][which.max(RESULT[RESULT$k==i,"C.Index"])])
}
best_sol
CentroidsList <- create_centroids(output, solution.names = best_sol, train.set = train_expression)
testSet=rna_luad$GSE68465
prob_matrix_test= testSet$expression_matrix
clinical_test=testSet$pheno_data
OS_test=Surv(time=clinical_test$time,event=clinical_test$status)
train_classes<- classify_multiple(prob_matrix=train_expression,centroid.list= CentroidsList, distancetype = distancetype)
test_classes<- classify_multiple(prob_matrix=test_expression,centroid.list= CentroidsList, distancetype = distancetype)
Prediction.models<- list()
for(i in best_sol){
OS<- train_surv
predicted_class<- as.factor(train_classes[,i])
predicted_classdf <- as.data.frame(predicted_class)
colnames(predicted_classdf)<- i
surv_formula <- as.formula(paste0("OS~ ",i))
coxsimple=coxph(surv_formula,data=predicted_classdf)
Prediction.models[[i]]<- coxsimple
}
C.indexes<- data.frame(train_CI=rep(NA,length(best_sol)),test_CI=rep(NA,length(best_sol)))
rownames(C.indexes)<- best_sol
for(i in best_sol){
predicted_class_train<- as.factor(train_classes[,i])
predicted_class_train_df <- as.data.frame(predicted_class_train)
colnames(predicted_class_train_df)<- i
CI_train<- concordance.index(predict(Prediction.models[[i]],predicted_class_train_df),surv.time=train_surv[,1],surv.event=train_surv[,2],outx=FALSE)$c.index
C.indexes[i,"train_CI"]<- CI_train
predicted_class_test<- as.factor(test_classes[,i])
predicted_class_test_df <- as.data.frame(predicted_class_test)
colnames(predicted_class_test_df)<- i
CI_test<- concordance.index(predict(Prediction.models[[i]],predicted_class_test_df),surv.time=test_surv[,1],surv.event=test_surv[,2],outx=FALSE)$c.index
C.indexes[i,"test_CI"]<- CI_test
}
print(C.indexes)
RESUTS
RESULTS
RESULT
C.indexes2=C.indexes
CI_train <- intsurv::cIndex(risk_score = predict(Prediction.models[[i]],predicted_class_train_df), time = train_surv[,1], event = train_surv[,2])["index"]
CI_train
C.indexes<- data.frame(train_CI=rep(NA,length(best_sol)),test_CI=rep(NA,length(best_sol)))
rownames(C.indexes)<- best_sol
for(i in best_sol){
predicted_class_train<- as.factor(train_classes[,i])
predicted_class_train_df <- as.data.frame(predicted_class_train)
colnames(predicted_class_train_df)<- i
CI_train <- intsurv::cIndex(risk_score = predict(Prediction.models[[i]],predicted_class_train_df), time = train_surv[,1], event = train_surv[,2])["index"]
#CI_train<- concordance.index(predict(Prediction.models[[i]],predicted_class_train_df),surv.time=train_surv[,1],surv.event=train_surv[,2],outx=FALSE)$c.index
C.indexes[i,"train_CI"]<- CI_train
predicted_class_test<- as.factor(test_classes[,i])
predicted_class_test_df <- as.data.frame(predicted_class_test)
colnames(predicted_class_test_df)<- i
CI_test <- intsurv::cIndex(risk_score = predict(Prediction.models[[i]],predicted_class_test_df), time = test_surv[,1], event = test_surv[,2])["index"]
#CI_test<- concordance.index(predict(Prediction.models[[i]],predicted_class_test_df),surv.time=test_surv[,1],surv.event=test_surv[,2],outx=FALSE)$c.index
C.indexes[i,"test_CI"]<- CI_test
}
print(C.indexes)
population <- 100
generations <-150
nCV <- 5
distancetype <- "pearson"
TournamentSize <- 2
period <- 1825
usegpu <- TRUE
output= galgoR::galgo(generations = generations, population = population,prob_matrix = train_expression, OS=train_surv,usegpu=usegpu,nCV= nCV, distancetype=distancetype, TournamentSize=TournamentSize, period=period)
plot_pareto(output)
load_all()
plot_pareto(output)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
# N of non-dominated solutions
nrow(NonDom_solutions)
# N of partitions found
table(NonDom_solutions$k)
#Average N of genes per signature
mean(unlist(lapply(NonDom_solutions$Genes,length)))
#SC range
range(NonDom_solutions$SC.Fit)
# Survival fitnesss range
range(NonDom_solutions$Surv.Fit)
getwd()
RESULT<- non_dominated_summary(output=output,OS=train_surv, prob_matrix= train_expression, distancetype =distancetype, usegpu= usegpu )
best_sol=NULL
for(i in unique(RESULT$k)){
best_sol=c(best_sol,RESULT[RESULT$k==i,"solution"][which.max(RESULT[RESULT$k==i,"C.Index"])])
}
print(best_sol)
CentroidsList <- create_centroids(output, solution.names = best_sol, train.set = train_expression)
testSet=rna_luad$GSE68465
prob_matrix_test= testSet$expression_matrix
clinical_test=testSet$pheno_data
OS_test=Surv(time=clinical_test$time,event=clinical_test$status)
train_classes<- classify_multiple(prob_matrix=train_expression,centroid.list= CentroidsList, distancetype = distancetype)
test_classes<- classify_multiple(prob_matrix=test_expression,centroid.list= CentroidsList, distancetype = distancetype)
Prediction.models<- list()
for(i in best_sol){
OS<- train_surv
predicted_class<- as.factor(train_classes[,i])
predicted_classdf <- as.data.frame(predicted_class)
colnames(predicted_classdf)<- i
surv_formula <- as.formula(paste0("OS~ ",i))
coxsimple=coxph(surv_formula,data=predicted_classdf)
Prediction.models[[i]]<- coxsimple
}
C.indexes<- data.frame(train_CI=rep(NA,length(best_sol)),test_CI=rep(NA,length(best_sol)))
rownames(C.indexes)<- best_sol
for(i in best_sol){
predicted_class_train<- as.factor(train_classes[,i])
predicted_class_train_df <- as.data.frame(predicted_class_train)
colnames(predicted_class_train_df)<- i
CI_train <- intsurv::cIndex(risk_score = predict(Prediction.models[[i]],predicted_class_train_df), time = train_surv[,1], event = train_surv[,2])["index"]
#CI_train<- concordance.index(predict(Prediction.models[[i]],predicted_class_train_df),surv.time=train_surv[,1],surv.event=train_surv[,2],outx=FALSE)$c.index
C.indexes[i,"train_CI"]<- CI_train
predicted_class_test<- as.factor(test_classes[,i])
predicted_class_test_df <- as.data.frame(predicted_class_test)
colnames(predicted_class_test_df)<- i
CI_test <- intsurv::cIndex(risk_score = predict(Prediction.models[[i]],predicted_class_test_df), time = test_surv[,1], event = test_surv[,2])["index"]
#CI_test<- concordance.index(predict(Prediction.models[[i]],predicted_class_test_df),surv.time=test_surv[,1],surv.event=test_surv[,2],outx=FALSE)$c.index
C.indexes[i,"test_CI"]<- CI_test
}
print(C.indexes)
RESULT["Solutions.12",]
RESULT
best_signature<- best_sol[which.max(C.indexes$test_CI)]
best_signature
C.indexes
best_sol
RESULT[best_sol,]
RESULT[RESULT$solution %in% best_sol,]
C.indexes
best_sol ="Solutions.18"
train_class <- train_classes[,best_signature]
surv_formula <- as.formula("Surv(train_clinic$time,train_clinic$status)~ train_class")
tumortotal1 <- surv_fit(surv_formula,data=train_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=train_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="TCGA Lung adenocarcinoma \n Galgo subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,1825),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
CentroidsList[[best_signature]]
C.indexes
RESULT
output_df[1:10,]
best_sol
best_sol=NULL
for(i in unique(RESULT$k)){
best_sol=c(best_sol,RESULT[RESULT$k==i,"solution"][which.max(RESULT[RESULT$k==i,"C.Index"])])
}
best_sol
names)CentroidsList
names(CentroidsList)
dim(CentroidsList[[3]])
dim(CentroidsList[["Solutions.18"]])
dim(CentroidsList[[6]])
best_signature
best_signature="Solutions.18"
train_class <- train_classes[,best_signature]
surv_formula <- as.formula("Surv(train_clinic$time,train_clinic$status)~ train_class")
tumortotal1 <- surv_fit(surv_formula,data=train_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=train_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="TCGA Lung adenocarcinoma \n Galgo subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,1825),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
test_class <- test_classes[,best_signature]
surv_formula <- as.formula("Surv(test_clinic$time,test_clinic$status)~ test_class")
tumortotal1 <- surv_fit(surv_formula,data=test_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=test_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="GSE68465 Lung adenocarcinoma \n Galgo subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,1825),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
surv_formula1 <- as.formula("Surv(test_clinic$time,test_clinic$status)~ test_class")
tumortotal1 <- surv_fit(surv_formula1,data=test_clinic)
tumortotal1diff <- survdiff(surv_formula1)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
surv_formula2 <- as.formula("Surv(test_clinic$time,test_clinic$status)~ Wilk.Class_test")
tumortotal2 <- surv_fit(surv_formula2,data=test_clinic)
tumortotal2diff <- survdiff(surv_formula2)
tumortotal2pval<- pchisq(tumortotal1diff$chisq, length(tumortotal2diff$n) - 1, lower.tail = FALSE)
SURV=list(GALGO=tumortotal1,Wilk=tumortotal2 )
COLS=c(1:8,10)
par(cex=1.35, mar=c(3.8, 3.8, 2.5, 2.5) + 0.1)
p=ggsurvplot(SURV,combine=TRUE,data=test_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="Galgo vs. Wilkerson subtypes \n Lung survival comparison", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,period),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
population <- 150
generations <-100
nCV <- 5
distancetype <- "pearson"
TournamentSize <- 2
period <- 1825
usegpu <- TRUE
output= galgoR::galgo(generations = generations, population = population,prob_matrix = train_expression, OS=train_surv,usegpu=usegpu,nCV= nCV, distancetype=distancetype, TournamentSize=TournamentSize, period=period)
plot_pareto(output)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
# N of non-dominated solutions
nrow(NonDom_solutions)
# N of partitions found
table(NonDom_solutions$k)
#Average N of genes per signature
mean(unlist(lapply(NonDom_solutions$Genes,length)))
#SC range
range(NonDom_solutions$SC.Fit)
# Survival fitnesss range
range(NonDom_solutions$Surv.Fit)
RESULT<- non_dominated_summary(output=output,OS=train_surv, prob_matrix= train_expression, distancetype =distancetype, usegpu= usegpu )
best_sol=NULL
for(i in unique(RESULT$k)){
best_sol=c(best_sol,RESULT[RESULT$k==i,"solution"][which.max(RESULT[RESULT$k==i,"C.Index"])])
}
print(best_sol)
CentroidsList <- create_centroids(output, solution.names = best_sol, train.set = train_expression)
testSet=rna_luad$GSE68465
prob_matrix_test= testSet$expression_matrix
clinical_test=testSet$pheno_data
OS_test=Surv(time=clinical_test$time,event=clinical_test$status)
train_classes<- classify_multiple(prob_matrix=train_expression,centroid.list= CentroidsList, distancetype = distancetype)
test_classes<- classify_multiple(prob_matrix=test_expression,centroid.list= CentroidsList, distancetype = distancetype)
Prediction.models<- list()
for(i in best_sol){
OS<- train_surv
predicted_class<- as.factor(train_classes[,i])
predicted_classdf <- as.data.frame(predicted_class)
colnames(predicted_classdf)<- i
surv_formula <- as.formula(paste0("OS~ ",i))
coxsimple=coxph(surv_formula,data=predicted_classdf)
Prediction.models[[i]]<- coxsimple
}
C.indexes<- data.frame(train_CI=rep(NA,length(best_sol)),test_CI=rep(NA,length(best_sol)))
rownames(C.indexes)<- best_sol
for(i in best_sol){
predicted_class_train<- as.factor(train_classes[,i])
predicted_class_train_df <- as.data.frame(predicted_class_train)
colnames(predicted_class_train_df)<- i
CI_train<- concordance.index(predict(Prediction.models[[i]],predicted_class_train_df),surv.time=train_surv[,1],surv.event=train_surv[,2],outx=FALSE)$c.index
C.indexes[i,"train_CI"]<- CI_train
predicted_class_test<- as.factor(test_classes[,i])
predicted_class_test_df <- as.data.frame(predicted_class_test)
colnames(predicted_class_test_df)<- i
CI_test<- concordance.index(predict(Prediction.models[[i]],predicted_class_test_df),surv.time=test_surv[,1],surv.event=test_surv[,2],outx=FALSE)$c.index
C.indexes[i,"test_CI"]<- CI_test
}
print(C.indexes)
best_signature<- best_sol[which.max(C.indexes$test_CI)]
print(best_signature)
RESULT
best_signature= "Solutions.3"
p<-ggsurvplot(tumortotal1,data=train_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="TCGA Lung adenocarcinoma \n Galgo subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,1825),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
train_class <- train_classes[,best_signature]
surv_formula <- as.formula("Surv(train_clinic$time,train_clinic$status)~ train_class")
tumortotal1 <- surv_fit(surv_formula,data=train_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=train_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="TCGA Lung adenocarcinoma \n Galgo subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,1825),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
test_class <- test_classes[,best_signature]
surv_formula <- as.formula("Surv(test_clinic$time,test_clinic$status)~ test_class")
tumortotal1 <- surv_fit(surv_formula,data=test_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=test_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="GSE68465 Lung adenocarcinoma \n Galgo subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,1825),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
population <- 75
generations <-100
nCV <- 5
distancetype <- "pearson"
TournamentSize <- 2
period <- 1825
usegpu <- TRUE
output= galgoR::galgo(generations = generations, population = population,prob_matrix = train_expression, OS=train_surv,usegpu=usegpu,nCV= nCV, distancetype=distancetype, TournamentSize=TournamentSize, period=period)
gc()
RESULT<- non_dominated_summary(output=output,OS=train_surv, prob_matrix= train_expression, distancetype =distancetype, usegpu= usegpu )
best_sol=NULL
for(i in unique(RESULT$k)){
best_sol=c(best_sol,RESULT[RESULT$k==i,"solution"][which.max(RESULT[RESULT$k==i,"C.Index"])])
}
print(best_sol)
CentroidsList <- create_centroids(output, solution.names = best_sol, train.set = train_expression)
Prediction.models<- list()
for(i in best_sol){
OS<- train_surv
predicted_class<- as.factor(train_classes[,i])
predicted_classdf <- as.data.frame(predicted_class)
colnames(predicted_classdf)<- i
surv_formula <- as.formula(paste0("OS~ ",i))
coxsimple=coxph(surv_formula,data=predicted_classdf)
Prediction.models[[i]]<- coxsimple
}
train_classes<- classify_multiple(prob_matrix=train_expression,centroid.list= CentroidsList, distancetype = distancetype)
test_classes<- classify_multiple(prob_matrix=test_expression,centroid.list= CentroidsList, distancetype = distancetype)
Prediction.models<- list()
for(i in best_sol){
OS<- train_surv
predicted_class<- as.factor(train_classes[,i])
predicted_classdf <- as.data.frame(predicted_class)
colnames(predicted_classdf)<- i
surv_formula <- as.formula(paste0("OS~ ",i))
coxsimple=coxph(surv_formula,data=predicted_classdf)
Prediction.models[[i]]<- coxsimple
}
C.indexes<- data.frame(train_CI=rep(NA,length(best_sol)),test_CI=rep(NA,length(best_sol)))
rownames(C.indexes)<- best_sol
for(i in best_sol){
predicted_class_train<- as.factor(train_classes[,i])
predicted_class_train_df <- as.data.frame(predicted_class_train)
colnames(predicted_class_train_df)<- i
CI_train<- concordance.index(predict(Prediction.models[[i]],predicted_class_train_df),surv.time=train_surv[,1],surv.event=train_surv[,2],outx=FALSE)$c.index
C.indexes[i,"train_CI"]<- CI_train
predicted_class_test<- as.factor(test_classes[,i])
predicted_class_test_df <- as.data.frame(predicted_class_test)
colnames(predicted_class_test_df)<- i
CI_test<- concordance.index(predict(Prediction.models[[i]],predicted_class_test_df),surv.time=test_surv[,1],surv.event=test_surv[,2],outx=FALSE)$c.index
C.indexes[i,"test_CI"]<- CI_test
}
print(C.indexes)
RESULT
print(C.indexes)
population <- 200
generations <-150
nCV <- 5
distancetype <- "pearson"
TournamentSize <- 2
period <- 1825
usegpu <- TRUE
population <- 150
generations <-150
nCV <- 5
distancetype <- "pearson"
TournamentSize <- 2
period <- 1825
usegpu <- TRUE
output= galgoR::galgo(generations = generations, population = population,prob_matrix = train_expression, OS=train_surv,usegpu=usegpu,nCV= nCV, distancetype=distancetype, TournamentSize=TournamentSize, period=period)
plot_pareto(output)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
# N of non-dominated solutions
nrow(NonDom_solutions)
# N of partitions found
table(NonDom_solutions$k)
#Average N of genes per signature
mean(unlist(lapply(NonDom_solutions$Genes,length)))
#SC range
range(NonDom_solutions$SC.Fit)
# Survival fitnesss range
range(NonDom_solutions$Surv.Fit)
RESULT<- non_dominated_summary(output=output,OS=train_surv, prob_matrix= train_expression, distancetype =distancetype, usegpu= usegpu )
best_sol=NULL
for(i in unique(RESULT$k)){
best_sol=c(best_sol,RESULT[RESULT$k==i,"solution"][which.max(RESULT[RESULT$k==i,"C.Index"])])
print(best_sol)
best_sol=NULL
for(i in unique(RESULT$k)){
best_sol=c(best_sol,RESULT[RESULT$k==i,"solution"][which.max(RESULT[RESULT$k==i,"C.Index"])])
}
print(best_sol)
CentroidsList <- create_centroids(output, solution.names = best_sol, train.set = train_expression)
testSet=rna_luad$GSE68465
prob_matrix_test= testSet$expression_matrix
clinical_test=testSet$pheno_data
OS_test=Surv(time=clinical_test$time,event=clinical_test$status)
train_classes<- classify_multiple(prob_matrix=train_expression,centroid.list= CentroidsList, distancetype = distancetype)
test_classes<- classify_multiple(prob_matrix=test_expression,centroid.list= CentroidsList, distancetype = distancetype)
Prediction.models<- list()
for(i in best_sol){
OS<- train_surv
predicted_class<- as.factor(train_classes[,i])
predicted_classdf <- as.data.frame(predicted_class)
colnames(predicted_classdf)<- i
surv_formula <- as.formula(paste0("OS~ ",i))
coxsimple=coxph(surv_formula,data=predicted_classdf)
Prediction.models[[i]]<- coxsimple
}
C.indexes<- data.frame(train_CI=rep(NA,length(best_sol)),test_CI=rep(NA,length(best_sol)))
rownames(C.indexes)<- best_sol
for(i in best_sol){
predicted_class_train<- as.factor(train_classes[,i])
predicted_class_train_df <- as.data.frame(predicted_class_train)
colnames(predicted_class_train_df)<- i
CI_train<- concordance.index(predict(Prediction.models[[i]],predicted_class_train_df),surv.time=train_surv[,1],surv.event=train_surv[,2],outx=FALSE)$c.index
C.indexes[i,"train_CI"]<- CI_train
predicted_class_test<- as.factor(test_classes[,i])
predicted_class_test_df <- as.data.frame(predicted_class_test)
colnames(predicted_class_test_df)<- i
CI_test<- concordance.index(predict(Prediction.models[[i]],predicted_class_test_df),surv.time=test_surv[,1],surv.event=test_surv[,2],outx=FALSE)$c.index
C.indexes[i,"test_CI"]<- CI_test
}
print(C.indexes)
RESULT
load("./results/50.rda")
plot_pareto(output)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
# N of non-dominated solutions
nrow(NonDom_solutions)
# N of partitions found
table(NonDom_solutions$k)
#Average N of genes per signature
mean(unlist(lapply(NonDom_solutions$Genes,length)))
#SC range
range(NonDom_solutions$SC.Fit)
# Survival fitnesss range
range(NonDom_solutions$Surv.Fit)
RESULT<- non_dominated_summary(output=output,OS=train_surv, prob_matrix= train_expression, distancetype =distancetype, usegpu= usegpu )
best_sol=NULL
for(i in unique(RESULT$k)){
best_sol=c(best_sol,RESULT[RESULT$k==i,"solution"][which.max(RESULT[RESULT$k==i,"C.Index"])])
}
print(best_sol)
CentroidsList <- create_centroids(output, solution.names = best_sol, train.set = train_expression)
testSet=rna_luad$GSE68465
prob_matrix_test= testSet$expression_matrix
clinical_test=testSet$pheno_data
OS_test=Surv(time=clinical_test$time,event=clinical_test$status)
train_classes<- classify_multiple(prob_matrix=train_expression,centroid.list= CentroidsList, distancetype = distancetype)
test_classes<- classify_multiple(prob_matrix=test_expression,centroid.list= CentroidsList, distancetype = distancetype)
Prediction.models<- list()
for(i in best_sol){
OS<- train_surv
predicted_class<- as.factor(train_classes[,i])
predicted_classdf <- as.data.frame(predicted_class)
colnames(predicted_classdf)<- i
surv_formula <- as.formula(paste0("OS~ ",i))
coxsimple=coxph(surv_formula,data=predicted_classdf)
Prediction.models[[i]]<- coxsimple
}
C.indexes<- data.frame(train_CI=rep(NA,length(best_sol)),test_CI=rep(NA,length(best_sol)))
rownames(C.indexes)<- best_sol
for(i in best_sol){
predicted_class_train<- as.factor(train_classes[,i])
predicted_class_train_df <- as.data.frame(predicted_class_train)
colnames(predicted_class_train_df)<- i
CI_train<- concordance.index(predict(Prediction.models[[i]],predicted_class_train_df),surv.time=train_surv[,1],surv.event=train_surv[,2],outx=FALSE)$c.index
C.indexes[i,"train_CI"]<- CI_train
predicted_class_test<- as.factor(test_classes[,i])
predicted_class_test_df <- as.data.frame(predicted_class_test)
colnames(predicted_class_test_df)<- i
CI_test<- concordance.index(predict(Prediction.models[[i]],predicted_class_test_df),surv.time=test_surv[,1],surv.event=test_surv[,2],outx=FALSE)$c.index
C.indexes[i,"test_CI"]<- CI_test
}
print(C.indexes)
RESULT
best_sol
best_signature<- best_sol[which.max(C.indexes$test_CI)]
best_signature
train_class <- train_classes[,best_signature]
surv_formula <- as.formula("Surv(train_clinic$time,train_clinic$status)~ train_class")
tumortotal1 <- surv_fit(surv_formula,data=train_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=train_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="TCGA Lung adenocarcinoma \n Galgo subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,1825),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
test_class <- test_classes[,best_signature]
surv_formula <- as.formula("Surv(test_clinic$time,test_clinic$status)~ test_class")
tumortotal1 <- surv_fit(surv_formula,data=test_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=test_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="GSE68465 Lung adenocarcinoma \n Galgo subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,1825),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
surv_formula1 <- as.formula("Surv(test_clinic$time,test_clinic$status)~ test_class")
tumortotal1 <- surv_fit(surv_formula1,data=test_clinic)
tumortotal1diff <- survdiff(surv_formula1)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
surv_formula2 <- as.formula("Surv(test_clinic$time,test_clinic$status)~ Wilk.Class_test")
tumortotal2 <- surv_fit(surv_formula2,data=test_clinic)
tumortotal2diff <- survdiff(surv_formula2)
tumortotal2pval<- pchisq(tumortotal1diff$chisq, length(tumortotal2diff$n) - 1, lower.tail = FALSE)
SURV=list(GALGO=tumortotal1,Wilk=tumortotal2 )
COLS=c(1:8,10)
par(cex=1.35, mar=c(3.8, 3.8, 2.5, 2.5) + 0.1)
p=ggsurvplot(SURV,combine=TRUE,data=test_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="Galgo vs. Wilkerson subtypes \n Lung survival comparison", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,period),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
load_all()
check()
check()
load_all()
check()
