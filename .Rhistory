eset <- eset[order(sapply(x, length)), ]
x <- lapply(featureNames(eset), function(x) strsplit(x, sep)[[1]])
y<- lapply(as.character(fData(eset)[,map]), function(x) strsplit(x, sep))
idx <- unlist(sapply(1:length(x), function(i) rep(i, length(x[[i]]))))
idy <- unlist(sapply(1:length(y), function(i) rep(i, length(y[[i]]))))
xx <- !duplicated(unlist(x))
idx <- idx[xx]
idy <- idy[xx]
x <- unlist(x)[xx]
y <- unlist(y)[xx]
eset <- eset[idx, ]
featureNames(eset) <- x
fData(eset)[,map] <- x
fData(eset)$gene <- y
return(eset)
}
Train=DropDuplicates(Train)
Train=expandProbesets(Train)
#Drop NAs in survival
Train <- Train[,!is.na(survival::Surv(time=pData(Train)$t.rfs,event=pData(Train)$e.rfs))]
Test=DropDuplicates(Test)
Test=expandProbesets(Test)
#Determine common probes (Genes)
Int= intersect(rownames(Train),rownames(Test))
Train= Train[Int,]
Test= Test[Int,]
identical(rownames(Train),rownames(Test))
train_expr= apply(exprs(Train),1,genefu::rescale,na.rm=TRUE,q=0.05)
test_expr= apply(exprs(Test),1,genefu::rescale,na.rm=TRUE,q=0.05)
population <- 30 # For testing reasons it is set to a low number but ideally should be above 100
generations <-15 # For testing reasons it is set to a low number but ideally should be above 150
nCV <- 5
distancetype <- "pearson"
TournamentSize <- 2
period <- 3650
reduced_expr<- exprs(Train)[sample(1:nrow(Train),1000,replace = FALSE),]
train_clinic <- pData(Train)
OS <- survival::Surv(time=train_clinic$t.rfs,event=train_clinic$e.rfs)
set.seed(264)
output <- galgoR::galgo(generations = generations,
population = population,
prob_matrix = reduced_expr,
OS = OS,
nCV = nCV,
distancetype = distancetype,
TournamentSize = TournamentSize,
period = period)
print(class(output))
outputList <- to_list(output)
head(names(outputList))
outputList[["Solution.1"]]
outputDF <- to_dataframe(output)
head(outputDF)
plot_pareto(output)
#The expression of the toy datasets are already scaled
#The reduced UPP dataset will be used as training set
train_expression <- exprs(Train)
train_clinic<- pData(Train)
train_features<- fData(Train)
train_surv<- survival::Surv(time=train_clinic$t.rfs,event=train_clinic$e.rfs)
#The reduced TRANSBIG dataset will be used as test set
test_expression <- exprs(Test)
test_clinic<- pData(Test)
test_features<- fData(Test)
test_surv<- survival::Surv(time=test_clinic$t.rfs,event=test_clinic$e.rfs)
#We change the rownames to be gene Symbol insted of Gene Id.
rownames(train_expression)<- train_features$gene
rownames(test_expression)<- test_features$gene
#Wilkerson's centroids
centroids<- PAM50Centroids
#Extract features from both data.frames
inBoth<- Reduce(intersect, list(rownames(train_expression),rownames(centroids)))
#Classify samples
Wilk.Class_train<- cluster_classify(train_expression[inBoth,],centroids[inBoth,])
table(Wilk.Class_train)
Wilk.Class_test<- cluster_classify(test_expression[inBoth,],centroids[inBoth,])
table(Wilk.Class_test)
surv_formula <- as.formula("Surv(train_clinic$t.rfs,train_clinic$e.rfs)~ Wilk.Class_train")
tumortotal1 <- surv_fit(surv_formula,data=train_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=train_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="TCGA Lung adenocarcinoma \n Wilkerson subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,3650),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
surv_formula <- as.formula("Surv(test_clinic$t.rfs,test_clinic$e.rfs)~ Wilk.Class_test")
tumortotal2 <- surv_fit(surv_formula,data=test_clinic)
tumortotal2diff <- survdiff(surv_formula)
tumortotal2pval<- pchisq(tumortotal2diff$chisq, length(tumortotal2diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal2,data=test_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="GSE68465 Lung adenocarcinoma \n Wilkerson subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,3650),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
population <- 15
generations <-5
nCV <- 5
distancetype <- "pearson"
TournamentSize <- 2
period <- 3650
usegpu <- FALSE
output= galgoR::galgo(generations = generations, population = population,prob_matrix = train_expression, OS=train_surv,usegpu=usegpu,nCV= nCV, distancetype=distancetype, TournamentSize=TournamentSize, period=period)
print(class(output))
plot_pareto(output)
output_df<- to_dataframe(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
# N of non-dominated solutions
nrow(NonDom_solutions)
# N of partitions found
table(NonDom_solutions$k)
#Average N of genes per signature
mean(unlist(lapply(NonDom_solutions$Genes,length)))
#SC range
range(NonDom_solutions$SC.Fit)
# Survival fitnesss range
range(NonDom_solutions$Surv.Fit)
RESULT<- non_dominated_summary(output=output,OS=train_surv, prob_matrix= train_expression, distancetype =distancetype, usegpu= usegpu )
best_sol=NULL
for(i in unique(RESULT$k)){
best_sol=c(best_sol,RESULT[RESULT$k==i,"solution"][which.max(RESULT[RESULT$k==i,"C.Index"])])
}
print(best_sol)
# [1] "Solutions.1" "Solutions.7" "Solutions.3" "Solutions.9"
best_sol
CentroidsList <- create_centroids(output, solution_names = best_sol, trainset = train_expression)
train_classes<- classify_multiple(prob_matrix=train_expression,centroid_list= CentroidsList, distancetype = distancetype)
test_classes<- classify_multiple(prob_matrix=test_expression,centroid_list= CentroidsList, distancetype = distancetype)
Prediction.models<- list()
for(i in best_sol){
OS<- train_surv
predicted_class<- as.factor(train_classes[,i])
predicted_classdf <- as.data.frame(predicted_class)
colnames(predicted_classdf)<- i
surv_formula <- as.formula(paste0("OS~ ",i))
coxsimple=coxph(surv_formula,data=predicted_classdf)
Prediction.models[[i]]<- coxsimple
}
C.indexes<- data.frame(train_CI=rep(NA,length(best_sol)),test_CI=rep(NA,length(best_sol)))
rownames(C.indexes)<- best_sol
for(i in best_sol){
predicted_class_train<- as.factor(train_classes[,i])
predicted_class_train_df <- as.data.frame(predicted_class_train)
colnames(predicted_class_train_df)<- i
CI_train<- concordance.index(predict(Prediction.models[[i]],predicted_class_train_df),surv.time=train_surv[,1],surv.event=train_surv[,2],outx=FALSE)$c.index
C.indexes[i,"train_CI"]<- CI_train
predicted_class_test<- as.factor(test_classes[,i])
predicted_class_test_df <- as.data.frame(predicted_class_test)
colnames(predicted_class_test_df)<- i
CI_test<- concordance.index(predict(Prediction.models[[i]],predicted_class_test_df),surv.time=test_surv[,1],surv.event=test_surv[,2],outx=FALSE)$c.index
C.indexes[i,"test_CI"]<- CI_test
}
print(C.indexes)
#             train_CI   test_CI
#Solutions.1 0.6079561 0.5685536
#Solutions.7 0.6034458 0.6025023
#Solutions.3 0.6147336 0.6060875
#Solutions.9 0.6024516 0.5916318
best_signature<- best_sol[which.max(C.indexes$test_CI)]
print(best_signature)
# "Solutions.3"
train_class <- train_classes[,best_signature]
surv_formula <- as.formula("Surv(train_clinic$t.rfs,train_clinic$e.rfs)~ train_class")
tumortotal1 <- surv_fit(surv_formula,data=train_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=train_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="TCGA Lung adenocarcinoma \n Galgo subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,3650),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
test_class <- test_classes[,best_signature]
surv_formula <- as.formula("Surv(test_clinic$t.rfs,test_clinic$e.rfs)~ test_class")
tumortotal1 <- surv_fit(surv_formula,data=test_clinic)
tumortotal1diff <- survdiff(surv_formula)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
p<-ggsurvplot(tumortotal1,data=test_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="GSE68465 Lung adenocarcinoma \n Galgo subtypes survival", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,3650),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
surv_formula1 <- as.formula("Surv(test_clinic$t.rfs,test_clinic$e.rfs)~ test_class")
tumortotal1 <- surv_fit(surv_formula1,data=test_clinic)
tumortotal1diff <- survdiff(surv_formula1)
tumortotal1pval<- pchisq(tumortotal1diff$chisq, length(tumortotal1diff$n) - 1, lower.tail = FALSE)
surv_formula2 <- as.formula("Surv(test_clinic$t.rfs,test_clinic$e.rfs)~ Wilk.Class_test")
tumortotal2 <- surv_fit(surv_formula2,data=test_clinic)
tumortotal2diff <- survdiff(surv_formula2)
tumortotal2pval<- pchisq(tumortotal1diff$chisq, length(tumortotal2diff$n) - 1, lower.tail = FALSE)
SURV=list(GALGO=tumortotal1,Wilk=tumortotal2 )
COLS=c(1:8,10)
par(cex=1.35, mar=c(3.8, 3.8, 2.5, 2.5) + 0.1)
p=ggsurvplot(SURV,combine=TRUE,data=test_clinic,risk.table=TRUE,pval=TRUE,palette="dark2", title="Galgo vs. Wilkerson subtypes \n Lung survival comparison", surv.scale="percent", conf.int=FALSE, xlab="time (days)", ylab="survival(%)", xlim=c(0,period),break.time.by = 365, ggtheme = theme_minimal(), risk.table.y.text.col = TRUE, risk.table.y.text = FALSE,censor=FALSE)
print(p)
classify_multiple
warnings()
devtools::install()
devtools::check()
devtools::check()
#' @param k
#' @param surv_obj
#' @param distance
#' @param nCV
#' @param period
#'
#' @return
#'
#' @examples
#' @noRd
crossvalidation <- function(data, flds, indv, k, surv_obj, distance, nCV, period) {
data <- data[indv, ]
distance_data <- distance(data)
train_a <- vapply(flds, build_train, data = data, simplify = FALSE)
test_a <- vapply(flds, build_test, data = data, simplify = FALSE)
sub <- vapply(flds, subset_distance, distance_data = distance_data, simplify = FALSE)
hc <- vapply(sub, cluster_algorithm, k = k)
centroids <- mapply(k_centroids, train_a, hc, SIMPLIFY = FALSE)
centroids_cor <- mapply(stats::cor, centroids[1], centroids[2:nCV], SIMPLIFY = FALSE)
cord <- vapply(centroids_cor, alloc2, simplify = FALSE)
cord <- append(list(as.matrix(1:k, ncol = 1)), cord, 1)
centroids <- mapply(reord, centroids, cord, SIMPLIFY = FALSE)
class_results <- mapply(cluster_classify, test_a, centroids, SIMPLIFY = FALSE)
cluster_class <- unlist(class_results)
cluster_class <- cluster_class[order(as.vector(unlist(flds)))]
fit_silhouette <- mean(cluster::silhouette(cluster_class, distance_data)[, 3])
fit_differences <- surv_fitness(surv_obj, cluster_class, period)
return(c(fit_silhouette, fit_differences))
}
crossvalidation(train_expr,flds, sample(1:0,nrow(train_expr),replace=FALSE),3,train_surv,calculate_distance,nCV=5,period=3650)
crossvalidation(train_expr,flds, sample(1:0,nrow(train_expr),replace=TRUE),3,train_surv,calculate_distance,nCV=5,period=3650)
calculate_distance=select_distance(distancetype="pearson",usegpu=FALSE)
crossvalidation(train_expr,flds, sample(1:0,nrow(train_expr),replace=TRUE),3,train_surv,calculate_distance,nCV=5,period=3650)
crossvalidation(train_expr,flds, as.logical(sample(1:0,nrow(train_expr),replace=TRUE)),3,train_surv,calculate_distance,nCV=5,period=3650)
?vapply
flds=create_folds(1:ncol(train_expr,k=5))
flds=create_folds(1:ncol(train_expr),k=5)
crossvalidation(train_expr,flds, as.logical(sample(1:0,nrow(train_expr),replace=TRUE)),3,train_surv,calculate_distance,nCV=5,period=3650)
crossvalidation <- function(data, flds, indv, k, surv_obj, distance, nCV, period) {
data <- data[indv, ]
distance_data <- distance(data)
train_a <- sapply(flds, build_train, data = data, simplify = FALSE)
test_a <- sapply(flds, build_test, data = data, simplify = FALSE)
sub <- sapply(flds, subset_distance, distance_data = distance_data, simplify = FALSE)
hc <- sapply(sub, cluster_algorithm, k = k)
centroids <- mapply(k_centroids, train_a, hc, SIMPLIFY = FALSE)
centroids_cor <- mapply(stats::cor, centroids[1], centroids[2:nCV], SIMPLIFY = FALSE)
cord <- sapply(centroids_cor, alloc2, simplify = FALSE)
cord <- append(list(as.matrix(1:k, ncol = 1)), cord, 1)
centroids <- mapply(reord, centroids, cord, SIMPLIFY = FALSE)
class_results <- mapply(cluster_classify, test_a, centroids, SIMPLIFY = FALSE)
cluster_class <- unlist(class_results)
cluster_class <- cluster_class[order(as.vector(unlist(flds)))]
fit_silhouette <- mean(cluster::silhouette(cluster_class, distance_data)[, 3])
fit_differences <- surv_fitness(surv_obj, cluster_class, period)
return(c(fit_silhouette, fit_differences))
}
#' @param k
#' @param surv_obj
#' @param distance
#' @param nCV
#' @param period
#'
#' @return
#'
#' @examples
#' @noRd
crossvalidation2 <- function(data, flds, indv, k, surv_obj, distance, nCV, period) {
data <- data[indv, ]
distance_data <- distance(data)
train_a <- vapply(flds, build_train, data = data, simplify = FALSE)
test_a <- vapply(flds, build_test, data = data, simplify = FALSE)
sub <- vapply(flds, subset_distance, distance_data = distance_data, simplify = FALSE)
hc <- vapply(sub, cluster_algorithm, k = k)
centroids <- mapply(k_centroids, train_a, hc, SIMPLIFY = FALSE)
centroids_cor <- mapply(stats::cor, centroids[1], centroids[2:nCV], SIMPLIFY = FALSE)
cord <- vapply(centroids_cor, alloc2, simplify = FALSE)
cord <- append(list(as.matrix(1:k, ncol = 1)), cord, 1)
centroids <- mapply(reord, centroids, cord, SIMPLIFY = FALSE)
class_results <- mapply(cluster_classify, test_a, centroids, SIMPLIFY = FALSE)
cluster_class <- unlist(class_results)
cluster_class <- cluster_class[order(as.vector(unlist(flds)))]
fit_silhouette <- mean(cluster::silhouette(cluster_class, distance_data)[, 3])
fit_differences <- surv_fitness(surv_obj, cluster_class, period)
return(c(fit_silhouette, fit_differences))
}
crossvalidation(train_expr,flds, as.logical(sample(1:0,nrow(train_expr),replace=TRUE)),3,train_surv,calculate_distance,nCV=5,period=3650)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
lapply(x, mean)
lapply(x, quantile, probs = 1:3/4)
sapply(x, quantile)
i39 <- sapply(3:9, seq) # list of vectors
i39
fivenum
sapply(i39, fivenum)
vapply(i39, fivenum,
c(Min. = 0, "1st Qu." = 0, Median = 0, "3rd Qu." = 0, Max. = 0))
build_train()
build_train
train_a<- sapply(flds,buld_train,data=data,simplify = FALSE)
train_a<- sapply(flds,build_train,data=data,simplify = FALSE)
data=train_expr
train_a<- sapply(flds,build_train,data=data,simplify = FALSE)
train_a
dim(train_a
)
length(train_a)
train_a$Fold1
dim(train_a$Fold1)
train_b<- vapply(flds,build_train,data=data,c(Fold1=NULL,Fold2=NULL,Fold3=NULL,Fold4=NULL,Fold5=NULL))
train_b<- vapply(flds,build_train,data=data,c(Fold1=0,Fold2=0,Fold3=0,Fold4=0,Fold5=0))
train_b<- lapply(flds,build_train,data=data)
train_b
identical(train_a,train_b)
train_a <- lapply(flds, build_train, data = data)
test_a <- lapply(flds, build_test, data = data)
sub <- lapply(flds, subset_distance, distance_data = distance_data)
distance_data <- distance(data)
distance_data <- calculate_distance(data)
dim(distance_data)
calculate_distance
train_a <- lapply(flds, build_train, data = data)
test_a <- lapply(flds, build_test, data = data)
dim(train_a$Fold1)
sub <- lapply(flds, subset_distance, distance_data = distance_data)
dim(data)
data=t(data)
distance_data <- distance(data)
distance_data <- calculate_distance(data)
train_a <- lapply(flds, build_train, data = data)
test_a <- lapply(flds, build_test, data = data)
create_folds(1:ncol(data),k=5)
flds= create_folds(1:ncol(data),k=5)
indv=as.logica(sample(1:0,nrow(data)))
indv=as.logical(sample(1:0,nrow(data)))
indv=as.logical(sample(1:0,nrow(data),replace=TRUE))
distance=select_distance()
data <- data[indv, ]
distance_data <- distance(data)
train_a <- lapply(flds, build_train, data = data)
test_a <- lapply(flds, build_test, data = data)
sub <- lapply(flds, subset_distance, distance_data = distance_data)
sub
dim(sub)
length(sub)
sub$Fold1
hc <- sapply(sub, cluster_algorithm, k = k)
k=5
hc <- sapply(sub, cluster_algorithm, k = k)
hc
hc <- lapply(sub, cluster_algorithm, k = k)
hc
hc <- sapply(sub, cluster_algorithm, k = k)
centroids <- mapply(k_centroids, train_a, hc, SIMPLIFY = FALSE)
centroids_cor <- mapply(stats::cor, centroids[1], centroids[2:nCV], SIMPLIFY = FALSE)
cord <- lapply(centroids_cor, alloc2)
cord <- append(list(as.matrix(1:k, ncol = 1)), cord, 1)
centroids <- mapply(reord, centroids, cord, SIMPLIFY = FALSE)
class_results <- mapply(cluster_classify, test_a, centroids, SIMPLIFY = FALSE)
cluster_class <- unlist(class_results)
cluster_class <- cluster_class[order(as.vector(unlist(flds)))]
fit_silhouette <- mean(cluster::silhouette(cluster_class, distance_data)[, 3])
fit_differences <- surv_fitness(surv_obj, cluster_class, period)
c(fit_silhouette, fit_differences)
hc <- sapply(sub, cluster_algorithm, k = k,simplify = FALSE)
hc
hc <- sapply(sub, cluster_algorithm, k = k,simplify = TRUE)
hc
hc <- vapply(sub, cluster_algorithm, k = k)
hc <- vapply(sub, cluster_algorithm, k = k,c("A"=0,"B"=0,"C"=0,"D"=0,"E"=0))
hc <- vapply(sub, cluster_algorithm, k = k,c(LETTERS[1:5]))
length(hc)
load_all()
check()
library(breastCancerTRANSBIG)
library(breastCancerUPP)
library(galgoR)
library(Biobase)
library(genefu)
library(survival)
library(survminer)
library(ggplot2)
data(upp)
Train<- upp
rm(upp)
data(transbig)
Test<- transbig
rm(transbig)
#To access gene expression data
train_expr<- exprs(Train)
test_expr<- exprs(Test)
#To access feature data
train_features<- fData(Train)
test_features<- fData(Test)
#To access clinical data
train_clinic <- pData(Train)
test_clinic <- pData(Test)
#To get PAM50 centroids from genefu package
PAM50Centroids <- pam50$centroids
#Custom function to drop duplicated genes (keep genes with highest variance)
DropDuplicates<- function(eset, map= "Gene.symbol"){
#Drop NA's
drop= which(is.na(fData(eset)[,map]))
eset=eset[-drop,]
#Drop duplicates
drop=NULL
Dup=as.character(unique(fData(eset)[which(duplicated(fData(eset)[,map])),map]))
Var= apply(exprs(eset),1,var)
for(j in Dup){
pos=which(fData(eset)[,map]==j)
drop= c(drop,pos[-which.max(Var[pos])])
}
eset=eset[-drop,]
featureNames(eset) <- fData(eset)[,map]
return(eset)
}
# Custom function to expand probesets mapping to multiple genes
expandProbesets <- function (eset, sep = "///", map="Gene.symbol")
{
x <- lapply(featureNames(eset), function(x) strsplit(x, sep)[[1]])
y<- lapply(as.character(fData(eset)[,map]), function(x) strsplit(x, sep))
eset <- eset[order(sapply(x, length)), ]
x <- lapply(featureNames(eset), function(x) strsplit(x, sep)[[1]])
y<- lapply(as.character(fData(eset)[,map]), function(x) strsplit(x, sep))
idx <- unlist(sapply(1:length(x), function(i) rep(i, length(x[[i]]))))
idy <- unlist(sapply(1:length(y), function(i) rep(i, length(y[[i]]))))
xx <- !duplicated(unlist(x))
idx <- idx[xx]
idy <- idy[xx]
x <- unlist(x)[xx]
y <- unlist(y)[xx]
eset <- eset[idx, ]
featureNames(eset) <- x
fData(eset)[,map] <- x
fData(eset)$gene <- y
return(eset)
}
Train=DropDuplicates(Train)
Train=expandProbesets(Train)
#Drop NAs in survival
Train <- Train[,!is.na(survival::Surv(time=pData(Train)$t.rfs,event=pData(Train)$e.rfs))]
Test=DropDuplicates(Test)
Test=expandProbesets(Test)
#Determine common probes (Genes)
Int= intersect(rownames(Train),rownames(Test))
Train= Train[Int,]
Test= Test[Int,]
identical(rownames(Train),rownames(Test))
dim(train_expr)
dim(Train)
train_expr= apply(exprs(Train),1,genefu::rescale,na.rm=TRUE,q=0.05)
test_expr= apply(exprs(Test),1,genefu::rescale,na.rm=TRUE,q=0.05)
dim(train_exprs()
dim(train_exprs)
dim(train_expr)
train_expr= t(apply(exprs(Train),1,genefu::rescale,na.rm=TRUE,q=0.05))
test_expr= t(apply(exprs(Test),1,genefu::rescale,na.rm=TRUE,q=0.05))
population <- 30 # For testing reasons it is set to a low number but ideally should be above 100
generations <-15 # For testing reasons it is set to a low number but ideally should be above 150
nCV <- 5
distancetype <- "pearson"
TournamentSize <- 2
period <- 3650
pam50$centroids.map
PAM50Centroids <- pam50$centroids
PAM50Genes <- pam50$centroids.map$probe
length(PAM50Genes)
length(intersect(rownames(train_expression),PAM50Genes))
intersect(rownames(train_expr),PAM50Genes)
featureNames(Train)
featureNames(Train)[ featureNames %in% PAM50Genes]
featureNames(Train)[ featureNames(Train) %in% PAM50Genes]
featureNames(Train)[ featureNames(Train) %in% PAM50Genes]
featureNames(Train)[ !featureNames(Train) %in% PAM50Genes]
Non_PAM50Genes<- featureNames(Train)[ !featureNames(Train) %in% PAM50Genes]
NonPAM50Genes <- sample(Non_PAM50Genes,200, replace=FALSE)
reduced_set <- c(PAMP50Genes, Non_PAM50Genes)
PAM50Genes <- pam50$centroids.map$probe
PAM50Genes<- featureNames(Train)[ featureNames(Train) %in% PAM50Genes]
reduced_set <- c(PAMP50Genes, Non_PAM50Genes)
reduced_set <- c(PAM50Genes, Non_PAM50Genes)
length(reduced_set)
length(NonPAM50Genes)
Non_PAM50Genes<- featureNames(Train)[ !featureNames(Train) %in% PAM50Genes]
Non_PAM50Genes <- sample(Non_PAM50Genes,200, replace=FALSE)
reduced_set <- c(PAM50Genes, Non_PAM50Genes)
length(reduced_set)
Train<- Train[reduced_set,]
Test<- Test[reduced_set,]
train_expr= t(apply(exprs(Train),1,genefu::rescale,na.rm=TRUE,q=0.05))
test_expr= t(apply(exprs(Test),1,genefu::rescale,na.rm=TRUE,q=0.05))
train_clinic <- pData(Train)
test_clinic <- pData(Test)
train_surv <- survival::Surv(time=train_clinic$t.rfs,event=train_clinic$e.rfs)
test_surv <- survival::Surv(time=test_clinic$t.rfs,event=test_clinic$e.rfs)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
eval=TRUE,
warning=FALSE,
message = FALSE
)
population <- 30 # For testing reasons it is set to a low number but ideally should be above 100
generations <-15 # For testing reasons it is set to a low number but ideally should be above 150
nCV <- 5
distancetype <- "pearson"
TournamentSize <- 2
period <- 3650
set.seed(264)
output <- galgoR::galgo(generations = generations,
population = population,
prob_matrix = train_expr,
OS = train_surv,
nCV = nCV,
distancetype = distancetype,
TournamentSize = TournamentSize,
period = period)
print(class(output))
outputList <- to_list(output)
head(names(outputList))
outputList[["Solution.1"]]
outputDF <- to_dataframe(output)
head(outputDF)
plot_pareto(output)
