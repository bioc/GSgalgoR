tumortotalpval <- format(tumortotalpval, digits=4)
coxsimple=coxph(surv_formula,data=predicted_classdf)
CI=concordance.index(predict(coxsimple),surv.time=OS[,1],surv.event=OS[,2],outx=FALSE)$c.index
mean_Sil =mean(silhouette(as.numeric(predicted_class),D)[,3])
row= c(name,k,length(genes),mean_Sil,CI)
RESULT[nrow(RESULT)+1,]=row
print(row)
}
}
non.dominated <- function(output,prob_matrix, OS, distancetype= "pearson",usegpu=FALSE){
if (!methods::is(output, "galgo.Obj")) {
stop("object must be of class 'galgo.Obj'")
}
require(survcomp)
require(cluster)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
select_distance(distancetype = distancetype,usegpu = usegpu)
RESULT=data.frame(solution=as.character(),k=as.numeric(),ngenes=as.numeric(),mean.Silhouette=as.numeric(),C.Index=as.numeric(),stringsAsFactors = FALSE)
for(i in 1:nrow(NonDom_solutions)){
name<- rownames(NonDom_solutions)[i]
genes<- NonDom_solutions[i,"Genes"][[1]]
k<- NonDom_solutions[i,"k"]
Sub_matrix<- prob_matrix[genes,]
D<- calculate_distance(Sub_matrix)
true_class<- cluster_algorithm(D,k)
Centroids <- kcentroid(Sub_matrix,true_class$cluster)
predicted_class <- classify(Sub_matrix,Centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
predicted_classdf <- as.data.frame(predicted_class)
# hsp_class= as.factor(classify(prob_matrix[R,],C,method=distancetype))
#  hsp_classdf= as.data.frame(hsp_class)
surv_formula <- as.formula("OS~ predicted_class")
tumortotal <- survfit(surv_formula)
totalsdf <- survdiff(surv_formula)
tumortotalpval <- 1 - pchisq(totalsdf$chisq, length(totalsdf$n) - 1)
tumortotalpval <- format(tumortotalpval, digits=4)
coxsimple=coxph(surv_formula,data=predicted_classdf)
CI=concordance.index(predict(coxsimple),surv.time=OS[,1],surv.event=OS[,2],outx=FALSE)$c.index
mean_Sil =mean(silhouette(as.numeric(predicted_class),D)[,3])
row= c(name,k,length(genes),mean_Sil,CI)
RESULT[nrow(RESULT)+1,]=row
print(row)
}
}
#' @param output
#' @param prob_matrix
#' @param OS
#' @param distancetype
#' @param usegpu
#'
#' @return
#' @export
#'
#' @examples
non.dominated <- function(output,prob_matrix, OS, distancetype= "pearson",usegpu=FALSE){
if (!methods::is(output, "galgo.Obj")) {
stop("object must be of class 'galgo.Obj'")
}
require(survcomp)
require(cluster)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
select_distance(distancetype = distancetype,usegpu = usegpu)
RESULT=data.frame(solution=as.character(),k=as.numeric(),ngenes=as.numeric(),mean.Silhouette=as.numeric(),C.Index=as.numeric(),stringsAsFactors = FALSE)
for(i in 1:nrow(NonDom_solutions)){
name<- rownames(NonDom_solutions)[i]
genes<- NonDom_solutions[i,"Genes"][[1]]
k<- NonDom_solutions[i,"k"]
Sub_matrix<- prob_matrix[genes,]
D<- calculate_distance(Sub_matrix)
true_class<- cluster_algorithm(D,k)
Centroids <- kcentroid(Sub_matrix,true_class$cluster)
predicted_class <- classify(Sub_matrix,Centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
predicted_classdf <- as.data.frame(predicted_class)
# hsp_class= as.factor(classify(prob_matrix[R,],C,method=distancetype))
#  hsp_classdf= as.data.frame(hsp_class)
surv_formula <- as.formula("OS~ predicted_class")
tumortotal <- survfit(surv_formula)
totalsdf <- survdiff(surv_formula)
tumortotalpval <- 1 - pchisq(totalsdf$chisq, length(totalsdf$n) - 1)
tumortotalpval <- format(tumortotalpval, digits=4)
coxsimple=coxph(surv_formula,data=predicted_classdf)
CI=concordance.index(predict(coxsimple),surv.time=OS[,1],surv.event=OS[,2],outx=FALSE)$c.index
mean_Sil =mean(silhouette(as.numeric(predicted_class),D)[,3])
row= c(name,k,length(genes),mean_Sil,CI)
RESULT[nrow(RESULT)+1,]=row
#print(row)
}
retunr(RESULT)
}
#' @param output
#' @param data
#' @param OS
#' @param distancetype
#' @param usegpu
#'
#' @return
#' @export
#'
#' @examples
non.dominated <- function(output,data, OS, distancetype= "pearson",usegpu=FALSE){
if (!methods::is(output, "galgo.Obj")) {
stop("object must be of class 'galgo.Obj'")
}
require(survcomp)
require(cluster)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
select_distance(distancetype = distancetype,usegpu = usegpu)
RESULT=data.frame(solution=as.character(),k=as.numeric(),ngenes=as.numeric(),mean.Silhouette=as.numeric(),C.Index=as.numeric(),stringsAsFactors = FALSE)
for(i in 1:nrow(NonDom_solutions)){
name<- rownames(NonDom_solutions)[i]
genes<- NonDom_solutions[i,"Genes"][[1]]
k<- NonDom_solutions[i,"k"]
Sub_matrix<- data[genes,]
D<- calculate_distance(Sub_matrix)
true_class<- cluster_algorithm(D,k)
Centroids <- kcentroid(Sub_matrix,true_class$cluster)
predicted_class <- classify(Sub_matrix,Centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
predicted_classdf <- as.data.frame(predicted_class)
# hsp_class= as.factor(classify(data[R,],C,method=distancetype))
#  hsp_classdf= as.data.frame(hsp_class)
surv_formula <- as.formula("OS~ predicted_class")
tumortotal <- survfit(surv_formula)
totalsdf <- survdiff(surv_formula)
tumortotalpval <- 1 - pchisq(totalsdf$chisq, length(totalsdf$n) - 1)
tumortotalpval <- format(tumortotalpval, digits=4)
coxsimple=coxph(surv_formula,data=predicted_classdf)
CI=concordance.index(predict(coxsimple),surv.time=OS[,1],surv.event=OS[,2],outx=FALSE)$c.index
mean_Sil =mean(silhouette(as.numeric(predicted_class),D)[,3])
row= c(name,k,length(genes),mean_Sil,CI)
RESULT[nrow(RESULT)+1,]=row
#print(row)
}
retunr(RESULT)
}
RESULT<- non.dominated(output = data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
RESULT<- non.dominated(output=output, data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
RESULT<- non.dominated(output=output,OS=OS data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
RESULT<- non.dominated(output=output,OS=OS, data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
#' @param output
#' @param data
#' @param Surv
#' @param distancetype
#' @param usegpu
#'
#' @return
#' @export
#'
#' @examples
non.dominated <- function(output,data, Surv, distancetype= "pearson",usegpu=FALSE){
if (!methods::is(output, "galgo.Obj")) {
stop("object must be of class 'galgo.Obj'")
}
require(survcomp)
require(cluster)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
select_distance(distancetype = distancetype,usegpu = usegpu)
RESULT=data.frame(solution=as.character(),k=as.numeric(),ngenes=as.numeric(),mean.Silhouette=as.numeric(),C.Index=as.numeric(),stringsAsFactors = FALSE)
for(i in 1:nrow(NonDom_solutions)){
name<- rownames(NonDom_solutions)[i]
genes<- NonDom_solutions[i,"Genes"][[1]]
k<- NonDom_solutions[i,"k"]
Sub_matrix<- data[genes,]
D<- calculate_distance(Sub_matrix)
true_class<- cluster_algorithm(D,k)
Centroids <- kcentroid(Sub_matrix,true_class$cluster)
predicted_class <- classify(Sub_matrix,Centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
predicted_classdf <- as.data.frame(predicted_class)
# hsp_class= as.factor(classify(data[R,],C,method=distancetype))
#  hsp_classdf= as.data.frame(hsp_class)
surv_formula <- as.formula("Surv~ predicted_class")
tumortotal <- survfit(surv_formula)
totalsdf <- survdiff(surv_formula)
tumortotalpval <- 1 - pchisq(totalsdf$chisq, length(totalsdf$n) - 1)
tumortotalpval <- format(tumortotalpval, digits=4)
coxsimple=coxph(surv_formula,data=predicted_classdf)
CI=concordance.index(predict(coxsimple),surv.time=Surv[,1],surv.event=Surv[,2],outx=FALSE)$c.index
mean_Sil =mean(silhouette(as.numeric(predicted_class),D)[,3])
row= c(name,k,length(genes),mean_Sil,CI)
RESULT[nrow(RESULT)+1,]=row
#print(row)
}
return(RESULT)
}
RESULT<- non.dominated(output=output,Surv=OS, data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
RESULT
output$Solutions
class(output)
print("object must be of class 'galgo.summary' \n try running 'non.dominated,summary' function")
solution.selection <- function(galgo_summary){
if (!methods::is(output, "galgo.summary")) {
stop("object must be of class 'galgo.summary': Try running 'non.dominated,summary' function")
}
best_sol=NULL
for(i in unique(galgo_summary$k)){
best_sol=c(best_sol,galgo_summary[galgo_summary$k==i,"solution"][which.max(galgo_summary[galgo_summary$k==i,"trainCI"])])
}
return(best_sol)
}
head(RESULT)
solution.selection <- function(galgo_summary){
if (!methods::is(output, "galgo.summary")) {
stop("object must be of class 'galgo.summary': Try running 'non.dominated,summary' function")
}
best_sol=NULL
for(i in unique(galgo_summary$k)){
best_sol=c(best_sol,galgo_summary[galgo_summary$k==i,"solution"][which.max(galgo_summary[galgo_summary$k==i,"C.Index"])])
}
return(best_sol)
}
RESULT<- non.dominated.summary(output=output,Surv=OS, data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
best_sol<- solution.selection(RESULT)
non.dominated.summary <- function(output,data, Surv, distancetype= "pearson",usegpu=FALSE){
if (!methods::is(output, "galgo.Obj")) {
stop("object must be of class 'galgo.Obj'")
}
require(survcomp)
require(cluster)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
select_distance(distancetype = distancetype,usegpu = usegpu)
RESULT=data.frame(solution=as.character(),k=as.numeric(),ngenes=as.numeric(),mean.Silhouette=as.numeric(),C.Index=as.numeric(),stringsAsFactors = FALSE)
for(i in 1:nrow(NonDom_solutions)){
name<- rownames(NonDom_solutions)[i]
genes<- NonDom_solutions[i,"Genes"][[1]]
k<- NonDom_solutions[i,"k"]
Sub_matrix<- data[genes,]
D<- calculate_distance(Sub_matrix)
true_class<- cluster_algorithm(D,k)
Centroids <- kcentroid(Sub_matrix,true_class$cluster)
predicted_class <- classify(Sub_matrix,Centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
predicted_classdf <- as.data.frame(predicted_class)
surv_formula <- as.formula("Surv~ predicted_class")
tumortotal <- survfit(surv_formula)
totalsdf <- survdiff(surv_formula)
tumortotalpval <- 1 - pchisq(totalsdf$chisq, length(totalsdf$n) - 1)
tumortotalpval <- format(tumortotalpval, digits=4)
coxsimple=coxph(surv_formula,data=predicted_classdf)
CI=concordance.index(predict(coxsimple),surv.time=Surv[,1],surv.event=Surv[,2],outx=FALSE)$c.index
mean_Sil =mean(silhouette(as.numeric(predicted_class),D)[,3])
row= c(name,k,length(genes),mean_Sil,CI)
RESULT[nrow(RESULT)+1,]=row
#print(row)
}
class(RESULT) <- "galgo.summary"
return(RESULT)
}
solution.selection <- function(galgo_summary){
if (!methods::is(output, "galgo.summary")) {
stop("object must be of class 'galgo.summary': Try running 'non.dominated,summary' function")
}
best_sol=NULL
for(i in unique(galgo_summary$k)){
best_sol=c(best_sol,galgo_summary[galgo_summary$k==i,"solution"][which.max(galgo_summary[galgo_summary$k==i,"C.Index"])])
}
return(best_sol)
}
RESULT<- non.dominated.summary(output=output,Surv=OS, data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
best_sol<- solution.selection(RESULT)
class(RESULT)
solution.selection <- function(galgo_summary){
if (!methods::is(galgo_summary, "galgo.summary")) {
stop("object must be of class 'galgo.summary': Try running 'non.dominated,summary' function")
}
best_sol=NULL
for(i in unique(galgo_summary$k)){
best_sol=c(best_sol,galgo_summary[galgo_summary$k==i,"solution"][which.max(galgo_summary[galgo_summary$k==i,"C.Index"])])
}
return(best_sol)
}
best_sol<- solution.selection(RESULT)
head(RESULT)
RESULT<- non.dominated.summary(output=output,Surv=OS, data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
head(RESULT)
RESULT=data.frame(solution=as.character(),k=as.numeric(),ngenes=as.numeric(),mean.Silhouette=as.numeric(),C.Index=as.numeric(),stringsAsFactors = FALSE)
head(RESULT)
NonDom_solutions
for(i in 1:nrow(NonDom_solutions)){
name<- rownames(NonDom_solutions)[i]
genes<- NonDom_solutions[i,"Genes"][[1]]
k<- NonDom_solutions[i,"k"]
Sub_matrix<- data[genes,]
D<- calculate_distance(Sub_matrix)
true_class<- cluster_algorithm(D,k)
Centroids <- kcentroid(Sub_matrix,true_class$cluster)
predicted_class <- classify(Sub_matrix,Centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
predicted_classdf <- as.data.frame(predicted_class)
surv_formula <- as.formula("Surv~ predicted_class")
tumortotal <- survfit(surv_formula)
totalsdf <- survdiff(surv_formula)
tumortotalpval <- 1 - pchisq(totalsdf$chisq, length(totalsdf$n) - 1)
tumortotalpval <- format(tumortotalpval, digits=4)
coxsimple=coxph(surv_formula,data=predicted_classdf)
CI=concordance.index(predict(coxsimple),surv.time=Surv[,1],surv.event=Surv[,2],outx=FALSE)$c.index
mean_Sil =mean(silhouette(as.numeric(predicted_class),D)[,3])
row= c(name,k,length(genes),mean_Sil,CI)
RESULT[nrow(RESULT)+1,]=row
#print(row)
}
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
select_distance(distancetype = distancetype,usegpu = usegpu)
RESULT=data.frame(solution=as.character(),k=as.numeric(),ngenes=as.numeric(),mean.Silhouette=as.numeric(),C.Index=as.numeric(),stringsAsFactors = FALSE)
i=1
name<- rownames(NonDom_solutions)[i]
genes<- NonDom_solutions[i,"Genes"][[1]]
k<- NonDom_solutions[i,"k"]
Sub_matrix<- prob_matrix[genes,]
D<- calculate_distance(Sub_matrix)
true_class<- cluster_algorithm(D,k)
Centroids <- kcentroid(Sub_matrix,true_class$cluster)
predicted_class <- classify(Sub_matrix,Centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
predicted_classdf <- as.data.frame(predicted_class)
surv_formula <- as.formula("Surv~ predicted_class")
tumortotal <- survfit(surv_formula)
totalsdf <- survdiff(surv_formula)
tumortotal <- survfit(surv_formula)
Surv=OS
surv_formula <- as.formula("Surv~ predicted_class")
tumortotal <- survfit(surv_formula)
totalsdf <- survdiff(surv_formula)
tumortotalpval <- 1 - pchisq(totalsdf$chisq, length(totalsdf$n) - 1)
tumortotalpval <- format(tumortotalpval, digits=4)
coxsimple=coxph(surv_formula,data=predicted_classdf)
CI=concordance.index(predict(coxsimple),surv.time=Surv[,1],surv.event=Surv[,2],outx=FALSE)$c.index
mean_Sil =mean(silhouette(as.numeric(predicted_class),D)[,3])
row= c(name,k,length(genes),mean_Sil,CI)
row
dim(RESULT)
length(row)
RESULT[nrow(RESULT)+1,]=row
RESULT
#' @param output
#' @param data
#' @param Surv
#' @param distancetype
#' @param usegpu
#'
#' @return
#' @export
#'
#' @examples
non.dominated.summary <- function(output,data, Surv, distancetype= "pearson",usegpu=FALSE){
if (!methods::is(output, "galgo.Obj")) {
stop("object must be of class 'galgo.Obj'")
}
require(survcomp)
require(cluster)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
select_distance(distancetype = distancetype,usegpu = usegpu)
RESULT=data.frame(solution=as.character(),k=as.numeric(),ngenes=as.numeric(),mean.Silhouette=as.numeric(),C.Index=as.numeric(),stringsAsFactors = FALSE)
for(i in 1:nrow(NonDom_solutions)){
name<- rownames(NonDom_solutions)[i]
genes<- NonDom_solutions[i,"Genes"][[1]]
k<- NonDom_solutions[i,"k"]
Sub_matrix<- data[genes,]
D<- calculate_distance(Sub_matrix)
true_class<- cluster_algorithm(D,k)
Centroids <- kcentroid(Sub_matrix,true_class$cluster)
predicted_class <- classify(Sub_matrix,Centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
predicted_classdf <- as.data.frame(predicted_class)
surv_formula <- as.formula("Surv~ predicted_class")
tumortotal <- survfit(surv_formula)
totalsdf <- survdiff(surv_formula)
tumortotalpval <- 1 - pchisq(totalsdf$chisq, length(totalsdf$n) - 1)
tumortotalpval <- format(tumortotalpval, digits=4)
coxsimple=coxph(surv_formula,data=predicted_classdf)
CI=concordance.index(predict(coxsimple),surv.time=Surv[,1],surv.event=Surv[,2],outx=FALSE)$c.index
mean_Sil =mean(silhouette(as.numeric(predicted_class),D)[,3])
row= c(name,k,length(genes),mean_Sil,CI)
RESULT[nrow(RESULT)+1,]=row
#print(row)
}
class(RESULT) <- "galgo.summary"
return(RESULT)
}
non_dominated<- non.dominated.summary(output=output,Surv=OS, data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
non_dominated
#' @param output
#' @param data
#' @param Surv
#' @param distancetype
#' @param usegpu
#'
#' @return
#' @export
#'
#' @examples
non.dominated.summary <- function(output,data, Surv, distancetype= "pearson",usegpu=FALSE){
if (!methods::is(output, "galgo.Obj")) {
stop("object must be of class 'galgo.Obj'")
}
require(survcomp)
require(cluster)
output_df<- toDataFrame(output)
NonDom_solutions<- output_df[output_df$Rank==1,]
select_distance(distancetype = distancetype,usegpu = usegpu)
RESULT=data.frame(solution=as.character(),k=as.numeric(),ngenes=as.numeric(),mean.Silhouette=as.numeric(),C.Index=as.numeric(),stringsAsFactors = FALSE)
for(i in 1:nrow(NonDom_solutions)){
name<- rownames(NonDom_solutions)[i]
genes<- NonDom_solutions[i,"Genes"][[1]]
k<- NonDom_solutions[i,"k"]
Sub_matrix<- data[genes,]
D<- calculate_distance(Sub_matrix)
true_class<- cluster_algorithm(D,k)
Centroids <- kcentroid(Sub_matrix,true_class$cluster)
predicted_class <- classify(Sub_matrix,Centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
predicted_classdf <- as.data.frame(predicted_class)
surv_formula <- as.formula("Surv~ predicted_class")
tumortotal <- survfit(surv_formula)
totalsdf <- survdiff(surv_formula)
tumortotalpval <- 1 - pchisq(totalsdf$chisq, length(totalsdf$n) - 1)
tumortotalpval <- format(tumortotalpval, digits=4)
coxsimple=coxph(surv_formula,data=predicted_classdf)
CI=concordance.index(predict(coxsimple),surv.time=Surv[,1],surv.event=Surv[,2],outx=FALSE)$c.index
mean_Sil =mean(silhouette(as.numeric(predicted_class),D)[,3])
row= c(name,k,length(genes),mean_Sil,CI)
RESULT[nrow(RESULT)+1,]=row
#print(row)
}
#class(RESULT) <- "galgo.summary"
return(RESULT)
}
non_dominated<- non.dominated.summary(output=output,Surv=OS, data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
non_dominated
?class
RESULT<- non.dominated.summary(output=output,Surv=OS, data= prob_matrix, distancetype =distancetype, usegpu= usegpu )
RESULT
head(output_df)
create.centroids<- function(output,solution.names,train.set){
CentroidsList<-list()
output_df<- toDataFrame(output)
for(j in solution.names){
genes<- output_df[j,"Genes"][[1]]
k<- output_df[j,"k"]
name<- paste0("Gaglo.",k)
Sub_matrix<- train.set[genes,]
D<- calculate_distance(Sub_matrix)
true_class<- cluster_algorithm(D,k)
Centroids <- kcentroid(Sub_matrix,true_class$cluster)
CentroidsList[[name]]=Centroids
}
return(CentroidsList)
}
CentroidsList <- create.centroids(output, solution.names = best_sol, train.set = prob_matrix)
CentroidsList
names(CentroidsList)
classify.multiple(data, centroid.list,distancetype=distancetype){
classes<- matrix(rep(NA,ncol(data)*length(centroid.list)),ncol=length(centroid.list))
as.data.frame<- classes
colnames(classes)<- names(centroid.list)
rownames(classes)<- colnames(data)
for( i in 1:length(centroid.list)){
centroids<- centroid.list[[i]]
name<- names(centroid.list)[i]
genes<- rownames(centroids)
k<- ncol(centroids)
Sub_matrix<- data[genes,]
predicted_class <- classify(Sub_matrix,centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
classes[,name]=predicted_class
}
return(classes)
}
classify.multiple<- function(data, centroid.list,distancetype=distancetype){
classes<- matrix(rep(NA,ncol(data)*length(centroid.list)),ncol=length(centroid.list))
as.data.frame<- classes
colnames(classes)<- names(centroid.list)
rownames(classes)<- colnames(data)
for( i in 1:length(centroid.list)){
centroids<- centroid.list[[i]]
name<- names(centroid.list)[i]
genes<- rownames(centroids)
k<- ncol(centroids)
Sub_matrix<- data[genes,]
predicted_class <- classify(Sub_matrix,centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
classes[,name]=predicted_class
}
return(classes)
}
classify.multiple<- function(data, centroid.list,distancetype="pearson"){
classes<- matrix(rep(NA,ncol(data)*length(centroid.list)),ncol=length(centroid.list))
as.data.frame<- classes
colnames(classes)<- names(centroid.list)
rownames(classes)<- colnames(data)
for( i in 1:length(centroid.list)){
centroids<- centroid.list[[i]]
name<- names(centroid.list)[i]
genes<- rownames(centroids)
k<- ncol(centroids)
Sub_matrix<- data[genes,]
predicted_class <- classify(Sub_matrix,centroids,method= distancetype)
predicted_class <- as.factor(predicted_class)
classes[,name]=predicted_class
}
return(classes)
}
test_classes<- classify.multiple(data=prob_matrix_test,centroid.list= CentroidsList, distancetype = distancetype)
test_classes
