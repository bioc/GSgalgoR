# FINAL PHASE 3rd submission

# Initialize -----
setwd("D:/Users/Marti/Desktop/Deconv challenge/PARA HARPO")

#Run once

#Get probes
path = "./features/validation_features.csv"
GENES = read.csv(path)
GENES= GENES[!is.na(GENES$dataset),]

GENESlist = list()
for (i in unique(GENES$dataset)) {
  GENESlist[[i]] = as.character(GENES[GENES$dataset == i &
                                        GENES$type == "ensg", "Gene"])
}




##TRIMMED data
data = read.table("Apr17_trimopt8_550_tsv_abundance.txt", sep = " ")
#data = read.table("Apr11_trimopt5_549_tsv_abundance.txt", sep = " ")


out= apply(data,2,anyNA)
data= data[,!out]
#data= read.table("D:/Users/Marti/Desktop/Deconv challenge/Trimmed_counts/Feb05_trimmed_read_counts/Feb05_2020_trimmed_tsvcounts.txt")
#data=data[,-1]
#colnames(data)= substr(colnames(data),1,nchar(colnames(data))-8)
#out=apply(data,2,anyNA)
#data=data[,!out]
##

#data=data[,which(!colnames(data)%in% c("SRR7647807","SRR7647761","SRR7647801","SRR7647814","SRR7647798"))]


#Simoni
#Apr17_trimopt8_CD8_Simoni_abundance

Simoni= read.table("Apr17_trimopt8_CD8_Simoni_abundance.txt")

data=cbind(data,Simoni)
rm(Simoni)

#Schoettler
#Not working very good
#Apr17_trimopt8_CD8_Simoni_abundance

Schoettler= read.table("Apr19_trimopt8_CD4_CD8_Schoettler_abundance_Collapsed.txt")

data=cbind(data,Schoettler)
rm(Schoettler)

#May15_trimdopt8_321_samples_abundance

last_data= read.table("May15_trimdopt8_321_samples_abundance.txt")


#Collapse burel
Burel_meta= read.table("D:/Users/Marti/Desktop/Deconv challenge/Trimmed_counts/Apr17_QC/Burel_metadata.txt",sep="\t",header=TRUE)
Burel_meta= Burel_meta[1:207,]

Burel= last_data[,as.character(Burel_meta$Run)]
rownames(Burel_meta)=Burel_meta$Run
Burel_meta= Burel_meta[colnames(Burel),]
identical(rownames(Burel_meta),colnames(Burel))

Summarize_replicate= function(data,metadata){
  pDat= metadata
  counts= data
  newvar= as.character(pDat$BioSample)
  #newvar= paste(pDat$platform,pDat$sample,pDat$replicate, pDat$center,sep="." )
  unewvar= unique(newvar)
  toFill= matrix(NA,nrow=nrow(counts),ncol=length(unewvar),dimnames=list(rownames(counts),unewvar))
  
  for(i in unewvar){
    ind= which(newvar==i)
    if(length(ind)>1){
      s= rowSums(counts[,ind])
      toFill[,i]=s
    }else{
      toFill[,i]=counts[,ind]
    }
  }
  
  return(toFill)
}


NewBurel= Summarize_replicate(Burel,Burel_meta)

last_data=last_data[,!colnames(last_data) %in% as.character(Burel_meta$Run)]
last_data= cbind(last_data,NewBurel)

#replace reanalized sets 2 4 7 and 11
rem= Reduce(intersect,list(colnames(last_data),colnames(data)))
out=match(rem,colnames(data))
data=data[,-out]

data=cbind(data,last_data)
rm(last_data)

#Stranded reanalysis #May20_trimdopt8_270_samples_abundance

last_data2= read.table("May20_trimdopt8_270_samples_abundance.txt")

rem= Reduce(intersect,list(colnames(last_data2),colnames(data)))
out=match(rem,colnames(data))
data=data[,-out]

data=cbind(data,last_data2)
rm(last_data2)

#Extra myeloid DC

last_data3= read.table("May24_DC_datasets_abundance.txt")

data=cbind(data,last_data3)
rm(last_data3)



#Bloodatlas samples 

bloodatlas= read.table("rna_blood_cell_sample_tpm_m.tsv",sep="\t",header=TRUE)

rownames(bloodatlas)= bloodatlas[,1]
bloodatlas=bloodatlas[,-c(1,2)]
bloodtypes= colnames(bloodatlas)
bldtypes=NULL
for(i in bloodtypes){
  l= substr(i, 1,nchar(i)-10)
  bldtypes=c(bldtypes,l)
}
#write.table(data.frame(patient=bloodtypes,cell=bldtypes),"bloodatlastypes.txt",sep="\t")

GENESlist[["My"]] = rownames(data)
GENESlist[["Bloodatlas"]] = rownames(bloodatlas)


inALL = Reduce(intersect, lapply(GENESlist, function(x) x))

data = data[inALL, ]
data=cbind(data,bloodatlas[inALL,])


metadata = read.table("Deconv_training_datasets_tidy8.txt",
                      sep = "\t",
                      header = TRUE,
                      stringsAsFactors = FALSE
)


#Remove treated CD4 and CD8s

metadata= metadata[!(metadata$treatment=="yes" & (metadata$family == "CD4" | metadata$family=="CD8")),]


both= Reduce(intersect,list(metadata$samplename,colnames(data)))


#metadata = metadata[metadata$samplename %in% colnames(data), ]
data= data[,both]
data= data[rowSums(data)!=0,]
rownames(metadata)=metadata$samplename
metadata = metadata[both, ]


#No need of this
#library(edgeR)
#keep=filterByExpr(data,group=metadata$finegrain)

#data=data[keep,]
inALL= rownames(data)

save(inALL, file="featureMaster.Rdata")

data = log2(data + 1)


write.table(data, "datasets_final_2.txt",sep="\t")


# Start ----

setwd("D:/Users/Marti/Desktop/Deconv challenge/PARA HARPO")

data<- read.table("datasets_final_2.txt",
                  sep = "\t",
                  header = TRUE,
                  stringsAsFactors = FALSE
)


inALL= rownames(data)

save(inALL, file="featureMaster.Rdata")

metadata = read.table("Deconv_training_datasets_tidy8.txt",
                      sep = "\t",
                      header = TRUE,
                      stringsAsFactors = FALSE
)


both= Reduce(intersect,list(metadata$samplename,colnames(data)))


#metadata = metadata[metadata$samplename %in% colnames(data), ]
data= data[,both]
rownames(metadata)=metadata$samplename
metadata = metadata[both, ]


Illumina= c("DS446395","CIVA3","CIAS4","FIAS4","DS500")
phase3sets= c("CIAS4","CIAS5","CIAS6","CIVA1","CIVA2","CIVA3")
phase3setsFG= c("FIAS4","FIAS5","FIAS6","FIVA1","FIVA2")



# Functions ---------------------------------------------------------------

mynorm4= function(l){
  
  #lr= rank(l*-1,ties.method="average")
  lr= rank(l*-1,ties.method="max")
  
  lr=log2(lr)
  lr= lr*-1
  lr= lr+ log2(length(lr))
  
  
  #lr[lr==min(lr)]=0
  res=lr
  return(res)
}




#The best so far
X= apply(data,2,mynorm4)
rm(data)



# Config -----

Trainset = 1
Norm = "Dense_rank7" #Dense_rank,Dense_rank2,Dense_rank3, quantile, cps
Mix= "A"
Method = "glmnet" #glmnet svm
lower.limit =-Inf
Family = "gaussian" #gaussian poisson



# Sample selector ----

celltypes= unique(metadata$finegrain)

TrainSet= NULL
for(i in celltypes[celltypes!="other"]){
  
  W=which(metadata$finegrain ==i)
  TrainSet= c(TrainSet,sample(W,length(W)*0.7,replace=FALSE))
  
}

TrainExp= X[,TrainSet]
#TrainClass= as.factor(metadata$coarsegrain[TrainSet])
TrainClass= as.factor(metadata$finegrain[TrainSet])

TestExp= X[,-TrainSet]
#TestClass= metadata$coarsegrain[-TrainSet]
TestClass= metadata$finegrain[-TrainSet]

#Train model

#cv     <- cv.glmnet(Xsubo,Yo,family="binomial",alpha=alpha)
library(glmnet)

cvfit=cv.glmnet(t(TrainExp), TrainClass, family="multinomial", type.multinomial = "grouped", parallel = TRUE)
plot(cvfit)

P=predict(cvfit, newx = t(TestExp), s = "lambda.min", type = "class")

accuracy <- table(P, TestClass)
acc <- sum(diag(accuracy))/sum(accuracy)


FEATS= coef(cvfit,s="lambda.min")
FEATS= do.call(cbind,FEATS)
def_FEATS= rownames(FEATS)[rowSums(FEATS)!=0][-1]

SampleCor= cor(X[def_FEATS,])


library(igraph)

SampleCorTrSubi=apply((SampleCor>0.80),1,as.numeric) + diag(1,ncol(SampleCor))
SampleCorTrSubi= graph_from_adjacency_matrix(SampleCorTrSubi, mode="undirected")

C5=cluster_louvain(SampleCorTrSubi)

out= table(C5$membership)<15
table(C5$membership)[!out]
table(metadata[C5$membership==1, "coarsegrain"])

metadata= metadata[C5$membership %in% names(table(C5$membership)[!out]),]

X=X[,metadata$samplename]

write.table(X, "datasets_final_2_X.txt",sep="\t")

# Start2 -----


setwd("D:/Users/Marti/Desktop/Deconv challenge/PARA HARPO")


mynorm4= function(l){
  
  #lr= rank(l*-1,ties.method="average")
  lr= rank(l*-1,ties.method="max")
  
  lr=log2(lr)
  lr= lr*-1
  lr= lr+ log2(length(lr))
  
  
  #lr[lr==min(lr)]=0
  res=lr
  return(res)
}





X<- read.table("datasets_final_2_X.txt",
               sep = "\t",
               header = TRUE,
               stringsAsFactors = FALSE
)


inALL= rownames(X)

metadata = read.table("Deconv_training_datasets_tidy8.txt",
                      sep = "\t",
                      header = TRUE,
                      stringsAsFactors = FALSE
)


both= Reduce(intersect,list(metadata$samplename,colnames(X)))


#metadata = metadata[metadata$samplename %in% colnames(data), ]
X= X[,both]
rownames(metadata)=metadata$samplename
metadata = metadata[both, ]




# CG admixtures -----------------------------------------------------------


mdtrain = metadata[metadata$coarsegrain != "other" & metadata$coarsegrain != "noise",]
#mdtrain = metadata[metadata$coarsegrain != "other",] 

Trainsamples= NULL
Testsamples= NULL
set.seed(314)
for(i in unique(mdtrain$coarsegrain)){
  len= sum(mdtrain$coarsegrain==i)*0.75
  w= which(mdtrain[,"coarsegrain"]==i)
  trains=sample(w,len,replace=FALSE)
  tests= w[!w %in% trains]
  Trainsamples=c(Trainsamples,trains)
  Testsamples=c(Testsamples,tests)
}

Trainsamples=  mdtrain$samplename[Trainsamples]
Testsamples= mdtrain$samplename[Testsamples]
#Mixinig ALL


#Coarsegrain

#Trainset
TRAINSET = "Train"
Xtrain = X[,Trainsamples]

mdtrain= metadata[Trainsamples,]
Types = unique(mdtrain$coarsegrain)
Type = mdtrain$coarsegrain

nusamples = 2000
props = matrix(runif(length(Types) * nusamples), ncol = nusamples)

M= matrix(rep(NA,length(Types) * nusamples),ncol=nusamples)
binom_prob= seq(0.1,0.7,by=0.1)
for(i in 1:ncol(M)){
  bp= sample(binom_prob,1)
  binom= rbinom(nrow(M), 1, bp)
  M[,i]=binom
}

if(any(colSums(M) == 0)){
  ind=which(colSums(M)==0)
  for(j in ind){
    ind2=sample(1:nrow(M),1)
    M[ind2,j]=1
  }
}

props = props * M
rm(M)

props = apply(props, 2, function(x) x / sum(x))

exp = matrix(rep(0, nrow(Xtrain) * ncol(props)), ncol = ncol(props))

for (j in 1:ncol(props)) {
  for (i in 1:length(Types)) {
    if(props[i, j]==0){next}
    #select cell type to mix
    s = which(Type == Types[i])
    
    #Decide how many samples of the cell type are going to be mixed
    numofsamples= sample(1:length(s),1)
    
    #Determine sampling probabilities according batch and finegrain type
    Factor= paste(mdtrain[s,"batch"],mdtrain[s,"finegrain"],sep=".")
    sampling_prob= (1/length(unique(Factor))) /table(Factor)
    sampling_prob= sampling_prob[Factor]
    l= sample(s,numofsamples,replace=FALSE,prob=sampling_prob)
    
    sampleprop = runif(numofsamples)
    #sampleprop = runif(sum(Type == Types[i]))
    sampleprop = sampleprop / sum(sampleprop)
    EXPi = rowSums(t(t(Xtrain[, l]) * sampleprop))
    exp[, j] = exp[, j] + EXPi * props[i, j]
  }
}


train = exp
trainprop = props
colnames(train) = 1:ncol(train)
rownames(train) = rownames(Xtrain)
rownames(trainprop) = Types

#Test set
TESTSET = "Test"
Xtest = X[, Testsamples]

mdtest = metadata[Testsamples,]

Types = unique(mdtest$coarsegrain)
Type = mdtest$coarsegrain


nusamples = 1000
props = matrix(runif(length(Types) * nusamples), ncol = nusamples)

M= matrix(rep(NA,length(Types) * nusamples),ncol=nusamples)
binom_prob= seq(0.1,0.7,by=0.1)
for(i in 1:ncol(M)){
  bp= sample(binom_prob,1)
  binom= rbinom(nrow(M), 1, bp)
  M[,i]=binom
}

if(any(colSums(M) == 0)){
  ind=which(colSums(M)==0)
  for(j in ind){
    ind2=sample(1:nrow(M),1)
    M[ind2,j]=1
  }
}

props = props * M
rm(M)
props = apply(props, 2, function(x)
  x / sum(x))

exp = matrix(rep(0, nrow(Xtrain) * ncol(props)), ncol = ncol(props))

#for (j in 1:ncol(props)) {
#  for (i in 1:length(Types)) {
#    s = which(Type == Types[i])
#    sampleprop = runif(sum(Type == Types[i]))
#    sampleprop = sampleprop / sum(sampleprop)
#    EXPi = rowSums(t(t(Xtest[, s]) * sampleprop))
#    exp[, j] = exp[, j] + EXPi * props[i, j]
#  }
#}


for (j in 1:ncol(props)) {
  for (i in 1:length(Types)) {
    if(props[i, j]==0){next}
    #select cell type to mix
    s = which(Type == Types[i])
    
    #Decide how many samples of the cell type are going to be mixed
    numofsamples= sample(1:length(s),1)
    
    #Determine sampling probabilities according batch and finegrain type
    Factor= paste(mdtest[s,"batch"],mdtest[s,"finegrain"],sep=".")
    sampling_prob= (1/length(unique(Factor))) /table(Factor)
    sampling_prob= sampling_prob[Factor]
    l= sample(s,numofsamples,replace=FALSE,prob=sampling_prob)
    
    sampleprop = runif(numofsamples)
    #sampleprop = runif(sum(Type == Types[i]))
    sampleprop = sampleprop / sum(sampleprop)
    EXPi = rowSums(t(t(Xtest[, l]) * sampleprop))
    exp[, j] = exp[, j] + EXPi * props[i, j]
  }
}



test = exp
testprop = props

colnames(test) = 1:ncol(test)
rownames(test) = rownames(Xtrain)

rownames(testprop) = Types

#save(list= c("train","trainprop","test","testprop"), file="deconv_cgdata_cps_new_feat_last3.RData")
#load("deconv_cgdata_cps_new_feat_last3.RData")

# Test data ---------------------------------------------------------------
#Phase datasets
testsetdir1 = "./phase1_data_ensg"
testsetdir2 = "./phase2_data_ensg"
testsetdir3 = "./phase3_data_ensg"

goldstand = "./gold_standards"

goldCoarse = read.csv(list.files(goldstand, full.names = TRUE)[1])
goldCoarse2 = read.csv(list.files(goldstand, full.names = TRUE)[2])
goldCoarse3 = read.csv(list.files(goldstand, full.names = TRUE)[3])
goldCoarse = rbind(rbind(goldCoarse, goldCoarse2),goldCoarse3)
rm(goldCoarse2)
rm(goldCoarse3)

goldFine = read.csv(list.files(goldstand, full.names = TRUE)[4])
goldFine2 = read.csv(list.files(goldstand, full.names = TRUE)[5])
goldFine3 = read.csv(list.files(goldstand, full.names = TRUE)[6])
goldFine = rbind(rbind(goldFine, goldFine2),goldFine3)
rm(goldFine2)
rm(goldFine3)



files = list.files(testsetdir1, full.names = TRUE)
files = c(files, list.files(testsetdir2, full.names = TRUE))
files = c(files, list.files(testsetdir3, full.names = TRUE))
#files=files[14]
DATASETS = NULL
for (i in files) {
  name = substr(i, 20, nchar(i) - 19)
  print(name)
  DATASETS = c(DATASETS, name)
  fl = read.csv(i, row.names = 1)
  assign(name, fl)
  
}


#if(Mix== "A"){
for (i in DATASETS) {
  print(i)
  DS = get(i)
  DS[is.na(DS)]=min(DS,na.rm=TRUE)
  expression_matrix = DS - min(DS)
  if(any(!inALL %in% rownames(expression_matrix))){
    Fs=inALL[!inALL %in% rownames(expression_matrix)]
    Add_matrix= matrix(NA,nrow=length(Fs),ncol=ncol(expression_matrix))
    colnames(Add_matrix)=colnames(expression_matrix)
    rownames(Add_matrix)=Fs
    expression_matrix=rbind(expression_matrix,Add_matrix)
    
  }
  
  expression_matrix = expression_matrix[inALL, ]
  expression_matrix[is.na(expression_matrix)] = log2(1)
  expression_matrix= apply(expression_matrix,2,mynorm4)
  #expression_matrix= voom(expression_matrix)$E
  
  #colnams= colnames(expression_matrix)
  #expression_matrix= normalize.quantiles.use.target(as.matrix(expression_matrix),target= data[,1])
  #colnames(expression_matrix)=colnams
  
  rownames(expression_matrix) = inALL
  #expression_matrix=  createMetaSpaceGM(expression_matrix, gene_cluster)
  #expression_matrix=  createMetaSpace(expression_matrix, gene_cluster)
  
  assign(i, expression_matrix)
  print("Done!")
  
}
#}


#rownames(X)=rownames(data)
#colnames(X)=colnames(data)


# CG Harpo GLMNET----

## DEVCON ELASTIC + RF (kernelab) TUNNING SCRIPT
## 08/05/2020

#library(caret)
library(glmnet)
library(foreach)
library(tibble)
#library(randomForest)
library(doParallel)
library(dplyr)
library(optparse)
registerDoParallel(cores=6)




alpha_range <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
lambda_ratio_range <- c(10e-8,10e-7,10e-6,10e-5,10e-4,10e-3)
#lambda_ratio_range <- c(10e-5,10e-4,10e-3)

#### MAIN 

option_list <- list(
  make_option("--experimenttag", action="store", type="character", default="default-experiment", help = "Set experiment tag id "),
  make_option("--nfeature", action="store", type="numeric", default=500, help = "Set the maximun number of features ")
)
opt <- parse_args(OptionParser(option_list=option_list))



parms <- expand.grid(alpha = alpha_range, lambda_ratio = lambda_ratio_range)
results_final <-c()
results_final_models <- list()
# Starting training  ---------
for (label_number in rownames(trainprop)) {
  # Create datasets  ----------
  labels <- trainprop[label_number, ]
  #trainset <- t(select_features(train,label_number))
  trainset<- t(train)
  #print(trainset %>% nrow)
  #print(trainset %>% ncol)
  #trainset <- scale(trainset,center=TRUE,scale=TRUE)
  #data_train <- cbind(label = labels, trainset)
  
  labels_test <- testprop[label_number, ]
  testset <- t(test)
  #print(testset %>% nrow)
  #print(testset %>% ncol)
  #data_test <- cbind(label = labels_test, testset)
  # Start parallel fine tuning  -----------
  results <- foreach(i = 1:nrow(parms),.packages = "glmnet",.combine = rbind) %dopar% {
    alpha <- parms[i,]$alpha
    lambda_ratio <- parms[i,]$lambda_ratio
    model <- cv.glmnet(
      type.measure = "mse",
      nfolds = 5,
      y = labels,
      x = trainset,
      alpha = alpha,
      standardize = FALSE,
      nlambda = 100,
      lambda.min.ratio = lambda_ratio,
      family = "gaussian",
      lower.limit = -Inf
    )
    
    preds <- predict(model, testset,s = "lambda.1se")
    spear <- cor(x = preds, y = labels_test, method = "spearman")
    pears <- cor(x = preds, y = labels_test, method = "pearson")
    partial_results<-data.frame(label_number,parms[i,], pearson = pears, spearman = spear)
    partial_results 
    
  }
  # Select best model ---------
  best_model <- results %>% arrange(desc(pearson)) %>% filter(row_number()==1) 
  print(paste("selecting best model for ",best_model$label_number," : ",best_model$alpha, ", ", best_model$lambda_ratio," Pearson value : ", best_model$pearson,sep=""))
  trainset <- rbind(trainset,testset)
  labels <- c(labels,labels_test)
  model <- cv.glmnet(
    type.measure = "mse",
    nfolds = 5,
    y = labels,
    x = trainset,
    alpha = best_model$alpha,
    standardize = FALSE,
    nlambda = 100,
    lambda.min.ratio = best_model$lambda_ratio,
    family = "gaussian",
    lower.limit = -Inf
  )
  results_final_models[[label_number]]<-model
  save(results_final_models,file = paste0("results_glmnet_devcon_bestmodels_cgdata_cps_att_sq",opt$experimenttag,".rdata"),compress = "gzip")
  results_final<-rbind(results_final,results)
  readr::write_csv(results_final,path=paste0("results_glmnet_devcon_cgdata_cps_att_sq",opt$experimenttag,".csv"))
}


# Test harpo GLMNET ----

RESULTS=list()
for(i in DATASETS){
  if(any(goldCoarse$dataset.name==i & !is.na(goldCoarse$measured))){
    cells= as.character(unique(goldCoarse[goldCoarse$dataset.name==i & !is.na(goldCoarse$measured),"cell.type"]))
    RESULTS[[i]]= data.frame(datasets=i,cells=cells,pearson=NA,spearman=NA)
  }
}

RESULTS=do.call(rbind,RESULTS)
#COURSE GRAIN

#RESULTS= RESULTS[RESULTS$datasets%in% Illumina,]
#RESULTS= RESULTS[RESULTS$datasets%in% "DS446395",]
#B.cells
cell = "B.cells"
model = results_final_models$B.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model, newx = t(expression_matrix), s = "lambda.1se")
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM,use="pairwise.complete.obs")
  spearman= cor(prediction, trueM,method="spearman",use="pairwise.complete.obs")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep = ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}

#CD4
cell = "CD4.T.cells"
model = results_final_models$CD4.T.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model, newx = t(expression_matrix), s = "lambda.1se")
  #prediction=  predict.train(model, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}

#CD8
cell = "CD8.T.cells"
model = results_final_models$CD8.T.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model, newx = t(expression_matrix), s = "lambda.1se")
  #prediction=  predict.train(model, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#NK
cell = "NK.cells"
model = results_final_models$NK.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model, newx = t(expression_matrix), s = "lambda.1se")
  #prediction=  predict.train(model, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Monocytic lineage
cell = "monocytic.lineage"
model = results_final_models$monocytic.lineage
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model, newx = t(expression_matrix), s = "lambda.1se")
  #prediction=  predict.train(model, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Neutro
cell = "neutrophils"
model = results_final_models$neutrophils
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model, newx = t(expression_matrix), s = "lambda.1se")
  #prediction=  predict.train(model, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Endothelial
cell = "endothelial.cells"
model = results_final_models$endothelial.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model, newx = t(expression_matrix), s = "lambda.1se")
  #prediction=  predict.train(model, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Fibro
cell = "fibroblasts"
model = results_final_models$fibroblasts
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model, newx = t(expression_matrix), s = "lambda.1se")
  #prediction=  predict.train(model, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}

RESULTS_h_glm_att= RESULTS

# CG Harpo PLS ----

## DEVCON PLS TUNNING SCRIPT
## 05/15/2020


#library(caret)
require(tibble)
require(randomForest)
require(pls)
require(foreach)
require(doParallel)
require(dplyr)
require(optparse)
#registerDoMC(cores=6)


## SETUP SNOW CLUSTER
#primary <- '10.64.10.37' # SAMSON
#primary <- 'localhost' # cabildo
#machineAddresses <- list(
#  list(host=primary,user='harpo',
#       ncore=7)#,
#  #  list(host='10.64.10.36',user='harpo', # KERRRIGAN
#  #       ncore=8),
#  #  list(host='10.64.10.39',user='harpo', # KERRRIGAN
#  #       ncore=16)
#)

#spec <- lapply(machineAddresses,
#               function(machine) {
#                 rep(list(list(host=machine$host,
#                               user=machine$user)),
#                     machine$ncore)
#               })
#spec <- unlist(spec,recursive=FALSE)




ncomp_range<-c(3,4,5,6,7,8,9,10,11,12,13,14)
nop_range<-c(1)

# Intuitively, the gamma parameter defines how far the influence of a single training example reaches, 
# with low values meaning 'far' and high values meaning 'close'. The gamma parameters can be seen as 
# the inverse of the radius of influence of samples 
# selected by the model as support vectors.

#### MAIN 

option_list <- list(
  make_option("--experimenttag", action="store", type="character", default="default-experiment", help = "Set experiment tag id "),
  make_option("--nfeature", action="store", type="numeric", default=500, help = "Set the maximun number of features ")
)

opt <- parse_args(OptionParser(option_list=option_list))


## Select features using RF
#rf_models<-results_final_models
#select_features <-function(data,label){

#  varimp<-randomForest::importance(rf_models[[label]]) 
#  varimp<- varimp %>% as.data.frame() %>% tibble::add_column(feature=rownames(varimp))# %>% 

#  best_features<-(varimp %>% arrange(desc(IncNodePurity)))[1:opt$nfeature,] %>% select(feature) %>% unlist() %>% unname()
#  data[which(data %>% rownames() %in% best_features),] 
#}

#parallelCluster <- parallel::makePSOCKcluster(
#  spec,
#  master=primary,
#  homogeneous=T,manual=F)
#registerDoParallel(parallelCluster)
#print(paste("Workers: ",getDoParWorkers()))



parms <- expand.grid(ncomp = ncomp_range,nop=nop_range)
results_final <-c()
results_final_models <- list()

for (label_number in rownames(trainprop)) {
  
  labels <- trainprop[label_number, ]
  trainset <- t(train_mg)
  data_train <- cbind(label = labels, trainset) %>% as.data.frame()
  
  labels_test <- testprop[label_number, ]
  testset <- t(test_mg)
  data_test <- cbind(label = labels_test, testset) %>% as.data.frame()
  
  results <- foreach(i = 1:nrow(parms),.packages = "pls", .combine = rbind) %dopar% {
    ncomp  <- parms[i,]$ncomp
    #ncomp <- parms$ncomp
    model <- pls::plsr(
      label ~ .,
      data = data_train,
      scale = FALSE,
      center = FALSE,
      ncomp = ncomp
      
    )
    
    preds <- predict(model, data_test,ncomp = ncomp)
    spear <- cor(x = preds, y = labels_test, method = "spearman")
    pears <- cor(x = preds, y = labels_test, method = "pearson")
    partial_results<-data.frame(label_number,parms[i,], pearson = pears, spearman = spear)
    #readr::write_csv(partial_results,path=paste(e,"_",c,"_partial_results_svm_devcon.csv"))
    partial_results 
    
  }
  best_model <- results %>% arrange(desc(pearson)) %>% filter(row_number()==1) 
  print(paste("selecting best model for ", best_model$label_number," : ",best_model$ncomp," Pearson value : ", best_model$pearson %>% round(digits = 4)," Spearman value : ", best_model$spearman %>% round(digits = 4),
              sep=""))
  data_train<-rbind(data_train,data_test)
  labels<-rbind(labels,labels_test)
  model <- pls::plsr(
    label ~ .,
    data = as.data.frame(data_train),
    scale = FALSE,
    center = FALSE,
    ncomp = best_model$ncomp
  )
  results_final_models[[label_number]]<-list(model=model,ncomp=best_model$ncomp)
  save(results_final_models,file = paste0("results_pls_devcon_bestmodels_fgdata_cps_20000_2_noscale",opt$experimenttag,".rdata"),compress = "gzip")
  results_final<-rbind(results_final,results)
  readr::write_csv(results_final,path=paste0("results_pls_devcon_fgdata_cps_20000_2_noscale_center",opt$experimenttag,".csv"))
}

# Shutdown cluster neatly
#if(!is.null(parallelCluster)) {
#  parallel::stopCluster(parallelCluster)
#  parallelCluster <- c()
#}

# Test harpo PLS ----

RESULTS=list()
for(i in DATASETS){
  if(any(goldCoarse$dataset.name==i & !is.na(goldCoarse$measured))){
    cells= as.character(unique(goldCoarse[goldCoarse$dataset.name==i & !is.na(goldCoarse$measured),"cell.type"]))
    RESULTS[[i]]= data.frame(datasets=i,cells=cells,pearson=NA,spearman=NA)
  }
}

RESULTS=do.call(rbind,RESULTS)
#COURSE GRAIN

#RESULTS= RESULTS[RESULTS$datasets%in% Illumina,]
#RESULTS= RESULTS[RESULTS$datasets%in% "DS446395",]
#B.cells
cell = "B.cells"
model = results_final_models$B.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model$model,model$ncomp, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM,use="pairwise.complete.obs")
  spearman= cor(prediction, trueM,method="spearman",use="pairwise.complete.obs")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep = ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}

#CD4
cell = "CD4.T.cells"
model = results_final_models$CD4.T.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model$model,model$ncomp, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}

#CD8
cell = "CD8.T.cells"
model = results_final_models$CD8.T.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model$model,model$ncomp, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#NK
cell = "NK.cells"
model = results_final_models$NK.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model$model,model$ncomp, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Monocytic lineage
cell = "monocytic.lineage"
model = results_final_models$monocytic.lineage
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model$model,model$ncomp, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Neutro
cell = "neutrophils"
model = results_final_models$neutrophils
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model$model,model$ncomp, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Endothelial
cell = "endothelial.cells"
model = results_final_models$endothelial.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model$model,model$ncomp, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Fibro
cell = "fibroblasts"
model = results_final_models$fibroblasts
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model$model,model$ncomp, newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}

RESULTS_h_pls_att= RESULTS


# CG Harpo SVM ----

## DEVCON SVM TUNNING SCRIPT
## 02/12/2019

require(tibble)
require(e1071)
require(foreach)
require(doParallel)
require(dplyr)
require(optparse)
#registerDoMC(cores=6)

epsilon_range <- c(5e-3, 5e-2, 5e-5,5e-4,5e-6)
#cost_range <- c(0.0001, 0.001, 0.01, 0.1, 0.5, 1, 2, 4,8,16,32,64,128,256)
#cost_range <- c(0.1, 0.5, 1, 2, 4,8,16,32,64,128,256,384,512,768)
cost_range <- c(256,384,512,768)
gamma_range <- c(1e-8,1e-7,1e-6,1e-5,1e-04,1e-3)

# Intuitively, the gamma parameter defines how far the influence of a single training example reaches, 
# with low values meaning 'far' and high values meaning 'close'. The gamma parameters can be seen as 
# the inverse of the radius of influence of samples 
# selected by the model as support vectors.

#### MAIN 

option_list <- list(
  make_option("--experimenttag", action="store", type="character", default="default-experiment", help = "Set experiment tag id "),
  make_option("--nfeature", action="store", type="numeric", default=500, help = "Set the maximun number of features ")
)

opt <- parse_args(OptionParser(option_list=option_list))

parms <- expand.grid(cost = cost_range, epsilon = epsilon_range, gamma= gamma_range)
results_final <-c()
results_final_models <- list()

for (label_number in rownames(trainprop)) {
  
  labels <- trainprop[label_number, ]
  trainset <- t(train_mg)
  data_train <- cbind(label = labels, trainset)
  
  labels_test <- testprop[label_number, ]
  testset <- t(test_mg)
  data_test <- cbind(label = labels_test, testset)
  
  results <- foreach(i = 1:nrow(parms),.packages = "e1071", .combine = rbind) %dopar% {
    c <- parms[i,]$cost
    e <- parms[i,]$epsilon
    g  <- parms[i,]$gamma
    model <- e1071::svm(
      label ~ .,
      data = data_train,
      type = "eps-regression",
      kernel = "radial",
      scale = FALSE,
      cost = c,
      epsilon = e,
      gamma = g,
      probability = F
    )
    
    preds <- predict(model, data_test)
    spear <- cor(x = preds, y = labels_test, method = "spearman")
    pears <- cor(x = preds, y = labels_test, method = "pearson")
    partial_results<-data.frame(label_number,parms[i,], pearson = pears, spearman = spear)
    #readr::write_csv(partial_results,path=paste(e,"_",c,"_partial_results_svm_devcon.csv"))
    partial_results 
    
  }
  best_model <- results %>% arrange(desc(pearson)) %>% filter(row_number()==1) 
  print(paste("selecting best model for ", best_model$label_number," : ",best_model$gamma,",", best_model$cost, ", ", 
              best_model$epsilon," Pearson value : ", best_model$pearson %>% round(digits = 4)," Spearman value : ", best_model$spearman %>% round(digits = 4),
              sep=""))
  data_train<-rbind(data_train,data_test)
  labels<-rbind(labels,labels_test)
  model <- svm(
    label ~ .,
    data = data_train,
    type = "eps-regression",
    kernel = "radial",
    scale = FALSE,
    gamma = best_model$gamma,
    cost = best_model$cost,
    epsilon = best_model$epsilon,
    probability = F
  )
  results_final_models[[label_number]]<-model
  save(results_final_models,file = paste0("results_svr_radial_devcon_bestmodels_cgdata_cps_noscale",opt$experimenttag,".rdata"),compress = "gzip")
  results_final<-rbind(results_final,results)
  readr::write_csv(results_final,path=paste0("results_svr_radial_devcon_cgdata_cps_noscale",opt$experimenttag,".csv"))
}


# Test harpo SVM ----

RESULTS=list()
for(i in DATASETS){
  if(any(goldCoarse$dataset.name==i & !is.na(goldCoarse$measured))){
    cells= as.character(unique(goldCoarse[goldCoarse$dataset.name==i & !is.na(goldCoarse$measured),"cell.type"]))
    RESULTS[[i]]= data.frame(datasets=i,cells=cells,pearson=NA,spearman=NA)
  }
}

RESULTS=do.call(rbind,RESULTS)
#COURSE GRAIN

#RESULTS= RESULTS[RESULTS$datasets%in% Illumina,]
#RESULTS= RESULTS[RESULTS$datasets%in% "DS446395",]
#B.cells
cell = "B.cells"
model = results_final_models$B.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model,newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM,use="pairwise.complete.obs")
  spearman= cor(prediction, trueM,method="spearman",use="pairwise.complete.obs")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep = ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}

#CD4
cell = "CD4.T.cells"
model = results_final_models$CD4.T.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model,newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}

#CD8
cell = "CD8.T.cells"
model = results_final_models$CD8.T.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model,newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#NK
cell = "NK.cells"
model = results_final_models$NK.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model,newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Monocytic lineage
cell = "monocytic.lineage"
model = results_final_models$monocytic.lineage
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model,newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Neutro
cell = "neutrophils"
model = results_final_models$neutrophils
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model,newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Endothelial
cell = "endothelial.cells"
model = results_final_models$endothelial.cells
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model,newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}


#Fibro
cell = "fibroblasts"
model = results_final_models$fibroblasts
print(cell)
sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
for (i in sets) {
  Dset = i
  print(Dset)
  expression_matrix = get(Dset)
  prediction = predict(model,newdata = t(expression_matrix))
  
  prediction[prediction < 0] = 0
  true = goldCoarse[goldCoarse$dataset.name == Dset &
                      goldCoarse$cell.type == cell, ]
  trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
  pearson= cor(prediction, trueM)
  spearman= cor(prediction, trueM,method="spearman")
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
  RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
  print(paste("pearson", pearson, sep = ": "))
  print(paste("spearman", spearman, sep =
                ": "))
  plot(prediction, trueM)
  lines(x=c(0,1),y=c(0,1))
}

RESULTS_h_svm_att= RESULTS



#FG train ----

mdtrain = metadata[metadata$finegrain != "other" & metadata$finegrain != "noise",]
#mdtrain = metadata[metadata$finegrain != "other",] 

Trainsamples= NULL
Testsamples= NULL
set.seed(314)
for(i in unique(mdtrain$finegrain)){
  len= sum(mdtrain$finegrain==i)*0.75
  w= which(mdtrain[,"finegrain"]==i)
  trains=sample(w,len,replace=FALSE)
  tests= w[!w %in% trains]
  Trainsamples=c(Trainsamples,trains)
  Testsamples=c(Testsamples,tests)
}

Trainsamples=  mdtrain$samplename[Trainsamples]
Testsamples= mdtrain$samplename[Testsamples]
#Mixinig ALL


#finegrain

#Trainset
TRAINSET = "Train"
Xtrain = X[,Trainsamples]

mdtrain= metadata[Trainsamples,]
Types = unique(mdtrain$finegrain)
Type = mdtrain$finegrain

nusamples = 2000
props = matrix(runif(length(Types) * nusamples), ncol = nusamples)

M= matrix(rep(NA,length(Types) * nusamples),ncol=nusamples)
binom_prob= seq(0.1,0.7,by=0.1)
for(i in 1:ncol(M)){
  bp= sample(binom_prob,1)
  binom= rbinom(nrow(M), 1, bp)
  M[,i]=binom
}

if(any(colSums(M) == 0)){
  ind=which(colSums(M)==0)
  for(j in ind){
    ind2=sample(1:nrow(M),1)
    M[ind2,j]=1
  }
}

props = props * M
rm(M)

props = apply(props, 2, function(x) x / sum(x))

exp = matrix(rep(0, nrow(Xtrain) * ncol(props)), ncol = ncol(props))

for (j in 1:ncol(props)) {
  for (i in 1:length(Types)) {
    if(props[i, j]==0){next}
    #select cell type to mix
    s = which(Type == Types[i])
    
    #Decide how many samples of the cell type are going to be mixed
    numofsamples= sample(1:length(s),1)
    
    #Determine sampling probabilities according batch and finegrain type
    Factor= paste(mdtrain[s,"batch"],mdtrain[s,"finegrain"],sep=".")
    sampling_prob= (1/length(unique(Factor))) /table(Factor)
    sampling_prob= sampling_prob[Factor]
    l= sample(s,numofsamples,replace=FALSE,prob=sampling_prob)
    
    sampleprop = runif(numofsamples)
    #sampleprop = runif(sum(Type == Types[i]))
    sampleprop = sampleprop / sum(sampleprop)
    EXPi = rowSums(t(t(Xtrain[, l]) * sampleprop))
    exp[, j] = exp[, j] + EXPi * props[i, j]
  }
}


train = exp
trainprop = props
colnames(train) = 1:ncol(train)
rownames(train) = rownames(Xtrain)
rownames(trainprop) = Types

#Test set
TESTSET = "Test"
Xtest = X[, Testsamples]

mdtest = metadata[Testsamples,]

Types = unique(mdtest$finegrain)
Type = mdtest$finegrain


nusamples = 1000
props = matrix(runif(length(Types) * nusamples), ncol = nusamples)

M= matrix(rep(NA,length(Types) * nusamples),ncol=nusamples)
binom_prob= seq(0.1,0.7,by=0.1)
for(i in 1:ncol(M)){
  bp= sample(binom_prob,1)
  binom= rbinom(nrow(M), 1, bp)
  M[,i]=binom
}

if(any(colSums(M) == 0)){
  ind=which(colSums(M)==0)
  for(j in ind){
    ind2=sample(1:nrow(M),1)
    M[ind2,j]=1
  }
}

props = props * M
rm(M)
props = apply(props, 2, function(x)
  x / sum(x))

exp = matrix(rep(0, nrow(Xtrain) * ncol(props)), ncol = ncol(props))

#for (j in 1:ncol(props)) {
#  for (i in 1:length(Types)) {
#    s = which(Type == Types[i])
#    sampleprop = runif(sum(Type == Types[i]))
#    sampleprop = sampleprop / sum(sampleprop)
#    EXPi = rowSums(t(t(Xtest[, s]) * sampleprop))
#    exp[, j] = exp[, j] + EXPi * props[i, j]
#  }
#}


for (j in 1:ncol(props)) {
  for (i in 1:length(Types)) {
    if(props[i, j]==0){next}
    #select cell type to mix
    s = which(Type == Types[i])
    
    #Decide how many samples of the cell type are going to be mixed
    numofsamples= sample(1:length(s),1)
    
    #Determine sampling probabilities according batch and finegrain type
    Factor= paste(mdtest[s,"batch"],mdtest[s,"finegrain"],sep=".")
    sampling_prob= (1/length(unique(Factor))) /table(Factor)
    sampling_prob= sampling_prob[Factor]
    l= sample(s,numofsamples,replace=FALSE,prob=sampling_prob)
    
    sampleprop = runif(numofsamples)
    #sampleprop = runif(sum(Type == Types[i]))
    sampleprop = sampleprop / sum(sampleprop)
    EXPi = rowSums(t(t(Xtest[, l]) * sampleprop))
    exp[, j] = exp[, j] + EXPi * props[i, j]
  }
}



test = exp
testprop = props

colnames(test) = 1:ncol(test)
rownames(test) = rownames(Xtrain)

rownames(testprop) = Types


save(list= c("train","trainprop","test","testprop"),file="deconv_fgdata_cps_new_feat_last3.RData")  
#load("deconv_fgdata_cps_new_feat_last3.RData")  



# FG Harpo GLMNET----

## DEVCON ELASTIC + RF (kernelab) TUNNING SCRIPT
## 08/05/2020

#library(caret)
library(glmnet)
library(foreach)
library(tibble)
#library(randomForest)
library(doParallel)
library(dplyr)
library(optparse)
registerDoParallel(cores=6)




alpha_range <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
lambda_ratio_range <- c(10e-8,10e-7,10e-6,10e-5,10e-4,10e-3)
#lambda_ratio_range <- c(10e-5,10e-4,10e-3)

#### MAIN 

option_list <- list(
  make_option("--experimenttag", action="store", type="character", default="default-experiment", help = "Set experiment tag id "),
  make_option("--nfeature", action="store", type="numeric", default=500, help = "Set the maximun number of features ")
)
opt <- parse_args(OptionParser(option_list=option_list))



parms <- expand.grid(alpha = alpha_range, lambda_ratio = lambda_ratio_range)
results_final <-c()
results_final_models <- list()
# Starting training  ---------
for (label_number in rownames(trainprop)) {
  # Create datasets  ----------
  labels <- trainprop[label_number, ]
  #trainset <- t(select_features(train,label_number))
  #trainset<- t(train_mg)
  
  trainset<- t(train)
  
  #print(trainset %>% nrow)
  #print(trainset %>% ncol)
  #trainset <- scale(trainset,center=TRUE,scale=TRUE)
  #data_train <- cbind(label = labels, trainset)
  
  labels_test <- testprop[label_number, ]
  #testset <- t(test_mg)
  testset<- t(test)
  
  
  #print(testset %>% nrow)
  #print(testset %>% ncol)
  #data_test <- cbind(label = labels_test, testset)
  # Start parallel fine tuning  -----------
  results <- foreach(i = 1:nrow(parms),.packages = "glmnet",.combine = rbind) %dopar% {
    alpha <- parms[i,]$alpha
    lambda_ratio <- parms[i,]$lambda_ratio
    model <- cv.glmnet(
      type.measure = "mse",
      nfolds = 5,
      y = labels,
      x = trainset,
      alpha = alpha,
      standardize = FALSE,
      nlambda = 100,
      lambda.min.ratio = lambda_ratio,
      family = "gaussian",
      lower.limit = -Inf
    )
    
    preds <- predict(model, testset,s = "lambda.1se")
    spear <- cor(x = preds, y = labels_test, method = "spearman")
    pears <- cor(x = preds, y = labels_test, method = "pearson")
    partial_results<-data.frame(label_number,parms[i,], pearson = pears, spearman = spear)
    partial_results 
    
  }
  # Select best model ---------
  best_model <- results %>% arrange(desc(pearson)) %>% filter(row_number()==1) 
  print(paste("selecting best model for ",best_model$label_number," : ",best_model$alpha, ", ", best_model$lambda_ratio," Pearson value : ", best_model$pearson,sep=""))
  trainset <- rbind(trainset,testset)
  labels <- c(labels,labels_test)
  model <- cv.glmnet(
    type.measure = "mse",
    nfolds = 5,
    y = labels,
    x = trainset,
    alpha = best_model$alpha,
    standardize = FALSE,
    nlambda = 100,
    lambda.min.ratio = best_model$lambda_ratio,
    family = "gaussian",
    lower.limit = -Inf
  )
  results_final_models[[label_number]]<-model
  save(results_final_models,file = paste0("results_glmnet_devcon_bestmodels_fgdata_cps",opt$experimenttag,"2.rdata"),compress = "gzip")
  results_final<-rbind(results_final,results)
  readr::write_csv(results_final,path=paste0("results_glmnet_devcon_fgdata_cps",opt$experimenttag,"2.csv"))
}


# FG testing --------------------------------------------------------
RESULTS=list()
for(i in DATASETS){
  if(any(goldFine$dataset.name==i & !is.na(goldFine$measured))){
    cells= as.character(unique(goldFine[goldFine$dataset.name==i & !is.na(goldFine$measured),"cell.type"]))
    RESULTS[[i]]= data.frame(datasets=i,cells=cells,pearson=NA,spearman=NA)
  }
}

RESULTS=do.call(rbind,RESULTS)

##For glmnet##

for(t in unique(RESULTS$cells)){
  cell = t
  print(cell)
  model = results_final_models[[cell]]
  sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
  for (i in sets) {
    Dset = i 
    print(Dset)
    expression_matrix = get(Dset)
    prediction = predict(model, newx = t(expression_matrix), s = "lambda.1se")
    
    true = goldFine[goldFine$dataset.name == Dset &
                      goldFine$cell.type == cell, ]
    trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
    pearson= cor(prediction, trueM,use="pairwise.complete.obs")
    spearman= cor(prediction, trueM,method="spearman",use="pairwise.complete.obs")
    RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
    RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
    print(paste("pearson", pearson, sep = ": "))
    print(paste("spearman", spearman, sep = ": "))
  }
  
}

RESULTS_glm= RESULTS



##For pls##

for(t in rownames(trainprop)){
  cell = t
  print(cell)
  model = results_final_models[[cell]]
  sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
  for (i in sets) {
    Dset = i 
    print(Dset)
    expression_matrix = get(Dset)
    prediction = predict(model$model,model$ncomp, newdata = t(expression_matrix))
    
    true = goldFine[goldFine$dataset.name == Dset &
                      goldFine$cell.type == cell, ]
    trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
    pearson= cor(prediction, trueM,use="pairwise.complete.obs")
    spearman= cor(prediction, trueM,method="spearman",use="pairwise.complete.obs")
    RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
    RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
    print(paste("pearson", pearson, sep = ": "))
    print(paste("spearman", spearman, sep = ": "))
  }
  
}

RESULTS_pls= RESULTS

##For svr##

for(t in rownames(trainprop)){
  cell = t
  print(cell)
  model = results_final_models[[cell]]
  sets= as.character(RESULTS[RESULTS$cells==cell,"datasets"])
  for (i in sets) {
    Dset = i 
    print(Dset)
    expression_matrix = get(Dset)
    prediction = predict(model,newdata = t(expression_matrix))
    
    true = goldFine[goldFine$dataset.name == Dset &
                      goldFine$cell.type == cell, ]
    trueM = true[match(colnames(expression_matrix), true$sample.id), "measured"]
    pearson= cor(prediction, trueM,use="pairwise.complete.obs")
    spearman= cor(prediction, trueM,method="spearman",use="pairwise.complete.obs")
    RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"pearson"]=pearson
    RESULTS[RESULTS$cells==cell & RESULTS$datasets==Dset,"spearman"]=spearman
    print(paste("pearson", pearson, sep = ": "))
    print(paste("spearman", spearman, sep = ": "))
  }
  
}

RESULTS_svr= RESULTS
